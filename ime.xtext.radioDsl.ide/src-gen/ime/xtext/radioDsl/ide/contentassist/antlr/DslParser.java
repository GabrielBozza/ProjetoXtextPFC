/*
 * generated by Xtext 2.24.0
 */
package ime.xtext.radioDsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import ime.xtext.radioDsl.ide.contentassist.antlr.internal.InternalDslParser;
import ime.xtext.radioDsl.services.DslGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class DslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getLeftSideAccess().getAlternatives(), "rule__LeftSide__Alternatives");
			builder.put(grammarAccess.getOperatorAccess().getAlternatives(), "rule__Operator__Alternatives");
			builder.put(grammarAccess.getOperatorNumAccess().getAlternatives(), "rule__OperatorNum__Alternatives");
			builder.put(grammarAccess.getOperatorBoolAccess().getAlternatives(), "rule__OperatorBool__Alternatives");
			builder.put(grammarAccess.getOperandAccess().getAlternatives(), "rule__Operand__Alternatives");
			builder.put(grammarAccess.getOperandNumAccess().getAlternatives(), "rule__OperandNum__Alternatives");
			builder.put(grammarAccess.getOperandBoolAccess().getAlternatives(), "rule__OperandBool__Alternatives");
			builder.put(grammarAccess.getOperandStringAccess().getAlternatives(), "rule__OperandString__Alternatives");
			builder.put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
			builder.put(grammarAccess.getSimpleExpAccess().getAlternatives(), "rule__SimpleExp__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getEDoubleAccess().getAlternatives_4_0(), "rule__EDouble__Alternatives_4_0");
			builder.put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
			builder.put(grammarAccess.getLogicOpAccess().getAlternatives(), "rule__LogicOp__Alternatives");
			builder.put(grammarAccess.getLogicOpMiddleAccess().getAlternatives(), "rule__LogicOpMiddle__Alternatives");
			builder.put(grammarAccess.getLogicOpBeforeAccess().getAlternatives(), "rule__LogicOpBefore__Alternatives");
			builder.put(grammarAccess.getCompOpAccess().getAlternatives(), "rule__CompOp__Alternatives");
			builder.put(grammarAccess.getCompOpStringAccess().getAlternatives(), "rule__CompOpString__Alternatives");
			builder.put(grammarAccess.getCompOpBoolAccess().getAlternatives(), "rule__CompOpBool__Alternatives");
			builder.put(grammarAccess.getMathOpAccess().getAlternatives(), "rule__MathOp__Alternatives");
			builder.put(grammarAccess.getBoolAttrAccess().getAlternatives(), "rule__BoolAttr__Alternatives");
			builder.put(grammarAccess.getNumAttrAccess().getAlternatives(), "rule__NumAttr__Alternatives");
			builder.put(grammarAccess.getRadioModesAccess().getAlternatives(), "rule__RadioModes__Alternatives");
			builder.put(grammarAccess.getRuleSetAccess().getGroup(), "rule__RuleSet__Group__0");
			builder.put(grammarAccess.getRuleSetAccess().getGroup_3(), "rule__RuleSet__Group_3__0");
			builder.put(grammarAccess.getRuleSetAccess().getGroup_3_1(), "rule__RuleSet__Group_3_1__0");
			builder.put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
			builder.put(grammarAccess.getSimpleExpAccess().getGroup_0(), "rule__SimpleExp__Group_0__0");
			builder.put(grammarAccess.getSimpleExpAccess().getGroup_0_2(), "rule__SimpleExp__Group_0_2__0");
			builder.put(grammarAccess.getSimpleExpAccess().getGroup_1(), "rule__SimpleExp__Group_1__0");
			builder.put(grammarAccess.getSimpleExpAccess().getGroup_1_2(), "rule__SimpleExp__Group_1_2__0");
			builder.put(grammarAccess.getSimpleExpAccess().getGroup_2(), "rule__SimpleExp__Group_2__0");
			builder.put(grammarAccess.getSimpleExpAccess().getGroup_2_2(), "rule__SimpleExp__Group_2_2__0");
			builder.put(grammarAccess.getSimpleExpAccess().getGroup_3(), "rule__SimpleExp__Group_3__0");
			builder.put(grammarAccess.getSimpleExpAccess().getGroup_3_2(), "rule__SimpleExp__Group_3_2__0");
			builder.put(grammarAccess.getCompoundExpAccess().getGroup(), "rule__CompoundExp__Group__0");
			builder.put(grammarAccess.getEDoubleAccess().getGroup(), "rule__EDouble__Group__0");
			builder.put(grammarAccess.getEDoubleAccess().getGroup_4(), "rule__EDouble__Group_4__0");
			builder.put(grammarAccess.getRuleSetAccess().getRuleAssignment_3_0(), "rule__RuleSet__RuleAssignment_3_0");
			builder.put(grammarAccess.getRuleSetAccess().getRuleAssignment_3_1_1(), "rule__RuleSet__RuleAssignment_3_1_1");
			builder.put(grammarAccess.getRuleAccess().getNameAssignment_1(), "rule__Rule__NameAssignment_1");
			builder.put(grammarAccess.getRuleAccess().getPriorityAssignment_5(), "rule__Rule__PriorityAssignment_5");
			builder.put(grammarAccess.getRuleAccess().getLeftsideAssignment_8(), "rule__Rule__LeftsideAssignment_8");
			builder.put(grammarAccess.getRuleAccess().getRightsideAssignment_10(), "rule__Rule__RightsideAssignment_10");
			builder.put(grammarAccess.getSimpleExpAccess().getPrecedingLogicOpAssignment_0_0(), "rule__SimpleExp__PrecedingLogicOpAssignment_0_0");
			builder.put(grammarAccess.getSimpleExpAccess().getOperandAssignment_0_2_0(), "rule__SimpleExp__OperandAssignment_0_2_0");
			builder.put(grammarAccess.getSimpleExpAccess().getOperatorAssignment_0_2_1(), "rule__SimpleExp__OperatorAssignment_0_2_1");
			builder.put(grammarAccess.getSimpleExpAccess().getOperandAssignment_0_2_2(), "rule__SimpleExp__OperandAssignment_0_2_2");
			builder.put(grammarAccess.getSimpleExpAccess().getPrecedingLogicOpAssignment_1_0(), "rule__SimpleExp__PrecedingLogicOpAssignment_1_0");
			builder.put(grammarAccess.getSimpleExpAccess().getOperandAssignment_1_2_0(), "rule__SimpleExp__OperandAssignment_1_2_0");
			builder.put(grammarAccess.getSimpleExpAccess().getOperatorAssignment_1_2_1(), "rule__SimpleExp__OperatorAssignment_1_2_1");
			builder.put(grammarAccess.getSimpleExpAccess().getOperandAssignment_1_2_2(), "rule__SimpleExp__OperandAssignment_1_2_2");
			builder.put(grammarAccess.getSimpleExpAccess().getPrecedingLogicOpAssignment_2_0(), "rule__SimpleExp__PrecedingLogicOpAssignment_2_0");
			builder.put(grammarAccess.getSimpleExpAccess().getOperandAssignment_2_2_0(), "rule__SimpleExp__OperandAssignment_2_2_0");
			builder.put(grammarAccess.getSimpleExpAccess().getOperatorAssignment_2_2_1(), "rule__SimpleExp__OperatorAssignment_2_2_1");
			builder.put(grammarAccess.getSimpleExpAccess().getOperandAssignment_2_2_2(), "rule__SimpleExp__OperandAssignment_2_2_2");
			builder.put(grammarAccess.getSimpleExpAccess().getPrecedingLogicOpAssignment_3_0(), "rule__SimpleExp__PrecedingLogicOpAssignment_3_0");
			builder.put(grammarAccess.getSimpleExpAccess().getOperatorAssignment_3_2_0(), "rule__SimpleExp__OperatorAssignment_3_2_0");
			builder.put(grammarAccess.getSimpleExpAccess().getOperandAssignment_3_2_1(), "rule__SimpleExp__OperandAssignment_3_2_1");
			builder.put(grammarAccess.getCompoundExpAccess().getPrecedingLogicOpAssignment_0(), "rule__CompoundExp__PrecedingLogicOpAssignment_0");
			builder.put(grammarAccess.getCompoundExpAccess().getExpressionAssignment_2(), "rule__CompoundExp__ExpressionAssignment_2");
			builder.put(grammarAccess.getCompoundExpAccess().getExpressionAssignment_3(), "rule__CompoundExp__ExpressionAssignment_3");
			builder.put(grammarAccess.getLogicAccess().getOperationAssignment(), "rule__Logic__OperationAssignment");
			builder.put(grammarAccess.getLogicMiddleAccess().getOperationAssignment(), "rule__LogicMiddle__OperationAssignment");
			builder.put(grammarAccess.getLogicBeforeAccess().getOperationAssignment(), "rule__LogicBefore__OperationAssignment");
			builder.put(grammarAccess.getComparatorAccess().getOperationAssignment(), "rule__Comparator__OperationAssignment");
			builder.put(grammarAccess.getComparatorStringAccess().getOperationAssignment(), "rule__ComparatorString__OperationAssignment");
			builder.put(grammarAccess.getComparatorBoolAccess().getOperationAssignment(), "rule__ComparatorBool__OperationAssignment");
			builder.put(grammarAccess.getMathAccess().getOperationAssignment(), "rule__Math__OperationAssignment");
			builder.put(grammarAccess.getNumAccess().getValueAssignment(), "rule__Num__ValueAssignment");
			builder.put(grammarAccess.getStringsAccess().getValueAssignment(), "rule__Strings__ValueAssignment");
			builder.put(grammarAccess.getBoolAccess().getValueAssignment(), "rule__Bool__ValueAssignment");
			builder.put(grammarAccess.getBoolAttributesAccess().getBoolAttrAssignment(), "rule__BoolAttributes__BoolAttrAssignment");
			builder.put(grammarAccess.getStringAttributesAccess().getStringAttrAssignment(), "rule__StringAttributes__StringAttrAssignment");
			builder.put(grammarAccess.getNumAttributesAccess().getNumAttrAssignment(), "rule__NumAttributes__NumAttrAssignment");
			builder.put(grammarAccess.getActionRadioAccess().getNewStateAssignment(), "rule__ActionRadio__NewStateAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DslGrammarAccess grammarAccess;

	@Override
	protected InternalDslParser createParser() {
		InternalDslParser result = new InternalDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
