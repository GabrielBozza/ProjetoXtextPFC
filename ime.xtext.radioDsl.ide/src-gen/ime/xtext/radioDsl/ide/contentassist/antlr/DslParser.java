/*
 * generated by Xtext 2.24.0
 */
package ime.xtext.radioDsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import ime.xtext.radioDsl.ide.contentassist.antlr.internal.InternalDslParser;
import ime.xtext.radioDsl.services.DslGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class DslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getLeftSideAccess().getAlternatives(), "rule__LeftSide__Alternatives");
			builder.put(grammarAccess.getRightSideAccess().getAlternatives(), "rule__RightSide__Alternatives");
			builder.put(grammarAccess.getOperatorAccess().getAlternatives(), "rule__Operator__Alternatives");
			builder.put(grammarAccess.getOperandAccess().getAlternatives(), "rule__Operand__Alternatives");
			builder.put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getEDoubleAccess().getAlternatives_4_0(), "rule__EDouble__Alternatives_4_0");
			builder.put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
			builder.put(grammarAccess.getLogicOpAccess().getAlternatives(), "rule__LogicOp__Alternatives");
			builder.put(grammarAccess.getCompOpAccess().getAlternatives(), "rule__CompOp__Alternatives");
			builder.put(grammarAccess.getMathOpAccess().getAlternatives(), "rule__MathOp__Alternatives");
			builder.put(grammarAccess.getBoolAttrAccess().getAlternatives(), "rule__BoolAttr__Alternatives");
			builder.put(grammarAccess.getNumAttrAccess().getAlternatives(), "rule__NumAttr__Alternatives");
			builder.put(grammarAccess.getRadioModesAccess().getAlternatives(), "rule__RadioModes__Alternatives");
			builder.put(grammarAccess.getRuleSetAccess().getGroup(), "rule__RuleSet__Group__0");
			builder.put(grammarAccess.getRuleSetAccess().getGroup_3(), "rule__RuleSet__Group_3__0");
			builder.put(grammarAccess.getRuleSetAccess().getGroup_3_3(), "rule__RuleSet__Group_3_3__0");
			builder.put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
			builder.put(grammarAccess.getLeftSide_ImplAccess().getGroup(), "rule__LeftSide_Impl__Group__0");
			builder.put(grammarAccess.getRightSide_ImplAccess().getGroup(), "rule__RightSide_Impl__Group__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getSimpleExpAccess().getGroup(), "rule__SimpleExp__Group__0");
			builder.put(grammarAccess.getSimpleExpAccess().getGroup_9(), "rule__SimpleExp__Group_9__0");
			builder.put(grammarAccess.getCompoundExpAccess().getGroup(), "rule__CompoundExp__Group__0");
			builder.put(grammarAccess.getCompoundExpAccess().getGroup_7(), "rule__CompoundExp__Group_7__0");
			builder.put(grammarAccess.getExpression_ImplAccess().getGroup(), "rule__Expression_Impl__Group__0");
			builder.put(grammarAccess.getLogicAccess().getGroup(), "rule__Logic__Group__0");
			builder.put(grammarAccess.getComparatorAccess().getGroup(), "rule__Comparator__Group__0");
			builder.put(grammarAccess.getMathsAccess().getGroup(), "rule__Maths__Group__0");
			builder.put(grammarAccess.getNumAccess().getGroup(), "rule__Num__Group__0");
			builder.put(grammarAccess.getStringsAccess().getGroup(), "rule__Strings__Group__0");
			builder.put(grammarAccess.getBoolAttributesAccess().getGroup(), "rule__BoolAttributes__Group__0");
			builder.put(grammarAccess.getStringAttributesAccess().getGroup(), "rule__StringAttributes__Group__0");
			builder.put(grammarAccess.getNumAttributesAccess().getGroup(), "rule__NumAttributes__Group__0");
			builder.put(grammarAccess.getBoolAccess().getGroup(), "rule__Bool__Group__0");
			builder.put(grammarAccess.getEDoubleAccess().getGroup(), "rule__EDouble__Group__0");
			builder.put(grammarAccess.getEDoubleAccess().getGroup_4(), "rule__EDouble__Group_4__0");
			builder.put(grammarAccess.getActionRadioAccess().getGroup(), "rule__ActionRadio__Group__0");
			builder.put(grammarAccess.getRuleSetAccess().getRuleAssignment_3_2(), "rule__RuleSet__RuleAssignment_3_2");
			builder.put(grammarAccess.getRuleSetAccess().getRuleAssignment_3_3_1(), "rule__RuleSet__RuleAssignment_3_3_1");
			builder.put(grammarAccess.getRuleAccess().getPriorityAssignment_1(), "rule__Rule__PriorityAssignment_1");
			builder.put(grammarAccess.getRuleAccess().getNameAssignment_4(), "rule__Rule__NameAssignment_4");
			builder.put(grammarAccess.getRuleAccess().getLeftsideAssignment_6(), "rule__Rule__LeftsideAssignment_6");
			builder.put(grammarAccess.getRuleAccess().getRightsideAssignment_8(), "rule__Rule__RightsideAssignment_8");
			builder.put(grammarAccess.getSimpleExpAccess().getPrecedingLogicOpAssignment_3(), "rule__SimpleExp__PrecedingLogicOpAssignment_3");
			builder.put(grammarAccess.getSimpleExpAccess().getOperatorAssignment_5(), "rule__SimpleExp__OperatorAssignment_5");
			builder.put(grammarAccess.getSimpleExpAccess().getOperandAssignment_8(), "rule__SimpleExp__OperandAssignment_8");
			builder.put(grammarAccess.getSimpleExpAccess().getOperandAssignment_9_1(), "rule__SimpleExp__OperandAssignment_9_1");
			builder.put(grammarAccess.getCompoundExpAccess().getPrecedingLogicOpAssignment_3(), "rule__CompoundExp__PrecedingLogicOpAssignment_3");
			builder.put(grammarAccess.getCompoundExpAccess().getExpressionAssignment_6(), "rule__CompoundExp__ExpressionAssignment_6");
			builder.put(grammarAccess.getCompoundExpAccess().getExpressionAssignment_7_1(), "rule__CompoundExp__ExpressionAssignment_7_1");
			builder.put(grammarAccess.getLogicAccess().getOperationAssignment_3(), "rule__Logic__OperationAssignment_3");
			builder.put(grammarAccess.getComparatorAccess().getOperationAssignment_3(), "rule__Comparator__OperationAssignment_3");
			builder.put(grammarAccess.getMathsAccess().getOperationAssignment_3(), "rule__Maths__OperationAssignment_3");
			builder.put(grammarAccess.getNumAccess().getValueAssignment_3(), "rule__Num__ValueAssignment_3");
			builder.put(grammarAccess.getStringsAccess().getValueAssignment_3(), "rule__Strings__ValueAssignment_3");
			builder.put(grammarAccess.getBoolAttributesAccess().getBoolAttrAssignment_3(), "rule__BoolAttributes__BoolAttrAssignment_3");
			builder.put(grammarAccess.getStringAttributesAccess().getStringAttrAssignment_3(), "rule__StringAttributes__StringAttrAssignment_3");
			builder.put(grammarAccess.getNumAttributesAccess().getNumAttrAssignment_3(), "rule__NumAttributes__NumAttrAssignment_3");
			builder.put(grammarAccess.getBoolAccess().getValueAssignment_0(), "rule__Bool__ValueAssignment_0");
			builder.put(grammarAccess.getActionRadioAccess().getNewStateAssignment_3(), "rule__ActionRadio__NewStateAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DslGrammarAccess grammarAccess;

	@Override
	protected InternalDslParser createParser() {
		InternalDslParser result = new InternalDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
