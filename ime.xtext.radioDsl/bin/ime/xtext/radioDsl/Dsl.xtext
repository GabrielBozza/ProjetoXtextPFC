// automatically generated by Xtext
grammar ime.xtext.radioDsl.Dsl with org.eclipse.xtext.common.Terminals

import "http://action/1.0" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


RuleSet returns RuleSet:
	{RuleSet}
	'RuleSet'
	'{'
		(rule+=Rule ( "," rule+=Rule)* )?
	'}';


LeftSide returns LeftSide:
	SimpleExp | CompoundExp;

RightSide returns RightSide:
	ActionRadio;

Operator returns Operator:
	Logic | Comparator | Math;
	
OperatorNum returns Operator:
	Comparator | Math;
	
OperatorString returns Operator:
	ComparatorString;
	
OperatorBool returns Operator:
	LogicMiddle | ComparatorBool;
	
OperatorBoolBefore returns Operator:
	LogicBefore;

Operand returns Operand:
	Num | Strings| Bool | BoolAttributes | StringAttributes | NumAttributes ;
	
OperandNum returns Operand:
	Num | NumAttributes ;
	
OperandBool returns Operand:
	Bool | BoolAttributes;
	
OperandString returns Operand:
	Strings | StringAttributes;

Expression returns Expression:
	SimpleExp | CompoundExp;

Rule returns Rule:
	'Rule'
	name=EString
	'{'
		'priority' + '=' + priority=EInt
		'rule'+'='+ leftside=LeftSide 
		'-->' rightside=RightSide
	'}';

SimpleExp returns SimpleExp:
	PrecedingLogicOp=LogicOp
	'(' 
		(operand+=OperandNum operator=OperatorNum operand+=OperandNum) ')' |
	PrecedingLogicOp=LogicOp
	'('  
		(operand+=OperandString operator=OperatorString operand+=OperandString) ')' |
	PrecedingLogicOp=LogicOp
	'('  
		(operand+=OperandBool operator=OperatorString operand+=OperandBool) ')' |
	PrecedingLogicOp=LogicOp
	'(' 
		(operator=OperatorBoolBefore operand+=OperandBool) ')';

CompoundExp returns CompoundExp:
	PrecedingLogicOp=LogicOp
	'['
		expression+=Expression ( expression+=Expression)* 
	']';

enum LogicOp returns LogicOp:
	None = '_' | and = 'and' | or = 'or' | not = 'not';
	
enum LogicOpMiddle returns LogicOp:
	and = 'and' | or = 'or';
	
enum LogicOpBefore returns LogicOp:
	None = '_' | not = 'not';

Logic returns Logic:
	Operation=LogicOp;
	
LogicMiddle returns Logic:
	Operation=LogicOpMiddle;
	
LogicBefore returns Logic:
	Operation=LogicOpBefore;

Comparator returns Comparator:
	Operation=CompOp;
	
ComparatorString returns Comparator:
	Operation=CompOpString;
	
ComparatorBool returns Comparator:
	Operation=CompOpBool;

Math returns Math:
	Operation=MathOp;

enum CompOp returns CompOp:
	greater = '>' | greater_equal = '>=' | less = '<' | less_equal = '<=' | equal = '=' | not_equal = '!=';
	
enum CompOpString returns CompOp:
	equal = '=' | not_equal = '!=';
	
enum CompOpBool returns CompOp:
	equal = '=' | not_equal = '!=';

enum MathOp returns MathOp:
	plus = '+' | minus = '-' | divided = '/' | multiplication = '*';
	
EString returns ecore::EString:
	STRING | ID;

EInt returns ecore::EInt:
	INT;

Num returns Num:
	value=EDouble;

Strings returns Strings:
	value=EString;

Bool returns Bool:
	value=EBoolean;
	
BoolAttributes returns BoolAttributes:
	boolAttr=BoolAttr;

StringAttributes returns StringAttributes:
	stringAttr=StringAttr;

NumAttributes returns NumAttributes:
	numAttr=NumAttr;

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;
	
EBoolean returns ecore::EBoolean:
	'true' | 'false';

enum BoolAttr returns BoolAttr:
	SNRValues_ASC = 'SNRValues_ASC' | SNRValues_DESC = 'SNRValues_DESC';

enum StringAttr returns StringAttr:
	OpRole = 'OperationalRole';

enum NumAttr returns NumAttr:
	SecLevel = 'SecurityLevel' | CarrierFreq = 'CarrierFrequency';

ActionRadio returns ActionRadio:
	newState=RadioModes;

enum RadioModes returns RadioModes:
	SILENT_MODE = 'SILENT_MODE' | ALERT_MODE = 'ALERT_MODE' | FULLDUPLEX_MODE = 'FULLDUPLEX_MODE' | NORMAL_MODE = 'NORMAL_MODE' | MAINTAIN_CURRENT_MODE = 'MAINTAIN_CURRENT_MODE';
