/*
 * generated by Xtext 2.24.0
 */
grammar InternalDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package ime.xtext.radioDsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package ime.xtext.radioDsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import ime.xtext.radioDsl.services.DslGrammarAccess;

}

@parser::members {

 	private DslGrammarAccess grammarAccess;

    public InternalDslParser(TokenStream input, DslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "RuleSet";
   	}

   	@Override
   	protected DslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleRuleSet
entryRuleRuleSet returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleSetRule()); }
	iv_ruleRuleSet=ruleRuleSet
	{ $current=$iv_ruleRuleSet.current; }
	EOF;

// Rule RuleSet
ruleRuleSet returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRuleSetAccess().getRuleSetAction_0(),
					$current);
			}
		)
		otherlv_1='RuleSet'
		{
			newLeafNode(otherlv_1, grammarAccess.getRuleSetAccess().getRuleSetKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getRuleSetAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRuleSetAccess().getRuleRuleParserRuleCall_3_0_0());
					}
					lv_rule_3_0=ruleRule
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRuleSetRule());
						}
						add(
							$current,
							"rule",
							lv_rule_3_0,
							"ime.xtext.radioDsl.Dsl.Rule");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getRuleSetAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getRuleSetAccess().getRuleRuleParserRuleCall_3_1_1_0());
						}
						lv_rule_5_0=ruleRule
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRuleSetRule());
							}
							add(
								$current,
								"rule",
								lv_rule_5_0,
								"ime.xtext.radioDsl.Dsl.Rule");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getRuleSetAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleLeftSide
entryRuleLeftSide returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLeftSideRule()); }
	iv_ruleLeftSide=ruleLeftSide
	{ $current=$iv_ruleLeftSide.current; }
	EOF;

// Rule LeftSide
ruleLeftSide returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLeftSideAccess().getSimpleExpParserRuleCall_0());
		}
		this_SimpleExp_0=ruleSimpleExp
		{
			$current = $this_SimpleExp_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLeftSideAccess().getCompoundExpParserRuleCall_1());
		}
		this_CompoundExp_1=ruleCompoundExp
		{
			$current = $this_CompoundExp_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRightSide
entryRuleRightSide returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRightSideRule()); }
	iv_ruleRightSide=ruleRightSide
	{ $current=$iv_ruleRightSide.current; }
	EOF;

// Rule RightSide
ruleRightSide returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getRightSideAccess().getActionRadioParserRuleCall());
	}
	this_ActionRadio_0=ruleActionRadio
	{
		$current = $this_ActionRadio_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleOperatorNum
entryRuleOperatorNum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperatorNumRule()); }
	iv_ruleOperatorNum=ruleOperatorNum
	{ $current=$iv_ruleOperatorNum.current; }
	EOF;

// Rule OperatorNum
ruleOperatorNum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOperatorNumAccess().getComparatorParserRuleCall_0());
		}
		this_Comparator_0=ruleComparator
		{
			$current = $this_Comparator_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperatorNumAccess().getMathParserRuleCall_1());
		}
		this_Math_1=ruleMath
		{
			$current = $this_Math_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleOperatorString
entryRuleOperatorString returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperatorStringRule()); }
	iv_ruleOperatorString=ruleOperatorString
	{ $current=$iv_ruleOperatorString.current; }
	EOF;

// Rule OperatorString
ruleOperatorString returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getOperatorStringAccess().getComparatorStringParserRuleCall());
	}
	this_ComparatorString_0=ruleComparatorString
	{
		$current = $this_ComparatorString_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleOperatorBoolBefore
entryRuleOperatorBoolBefore returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperatorBoolBeforeRule()); }
	iv_ruleOperatorBoolBefore=ruleOperatorBoolBefore
	{ $current=$iv_ruleOperatorBoolBefore.current; }
	EOF;

// Rule OperatorBoolBefore
ruleOperatorBoolBefore returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getOperatorBoolBeforeAccess().getLogicBeforeParserRuleCall());
	}
	this_LogicBefore_0=ruleLogicBefore
	{
		$current = $this_LogicBefore_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleOperandNum
entryRuleOperandNum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperandNumRule()); }
	iv_ruleOperandNum=ruleOperandNum
	{ $current=$iv_ruleOperandNum.current; }
	EOF;

// Rule OperandNum
ruleOperandNum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOperandNumAccess().getNumParserRuleCall_0());
		}
		this_Num_0=ruleNum
		{
			$current = $this_Num_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperandNumAccess().getNumAttributesParserRuleCall_1());
		}
		this_NumAttributes_1=ruleNumAttributes
		{
			$current = $this_NumAttributes_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleOperandBool
entryRuleOperandBool returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperandBoolRule()); }
	iv_ruleOperandBool=ruleOperandBool
	{ $current=$iv_ruleOperandBool.current; }
	EOF;

// Rule OperandBool
ruleOperandBool returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOperandBoolAccess().getBoolParserRuleCall_0());
		}
		this_Bool_0=ruleBool
		{
			$current = $this_Bool_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperandBoolAccess().getBoolAttributesParserRuleCall_1());
		}
		this_BoolAttributes_1=ruleBoolAttributes
		{
			$current = $this_BoolAttributes_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleOperandString
entryRuleOperandString returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperandStringRule()); }
	iv_ruleOperandString=ruleOperandString
	{ $current=$iv_ruleOperandString.current; }
	EOF;

// Rule OperandString
ruleOperandString returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOperandStringAccess().getStringsParserRuleCall_0());
		}
		this_Strings_0=ruleStrings
		{
			$current = $this_Strings_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperandStringAccess().getStringAttributesParserRuleCall_1());
		}
		this_StringAttributes_1=ruleStringAttributes
		{
			$current = $this_StringAttributes_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getSimpleExpParserRuleCall_0());
		}
		this_SimpleExp_0=ruleSimpleExp
		{
			$current = $this_SimpleExp_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getCompoundExpParserRuleCall_1());
		}
		this_CompoundExp_1=ruleCompoundExp
		{
			$current = $this_CompoundExp_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	iv_ruleRule=ruleRule
	{ $current=$iv_ruleRule.current; }
	EOF;

// Rule Rule
ruleRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Rule'
		{
			newLeafNode(otherlv_0, grammarAccess.getRuleAccess().getRuleKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"ime.xtext.radioDsl.Dsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getRuleAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='priority'
			{
				newLeafNode(otherlv_3, grammarAccess.getRuleAccess().getPriorityKeyword_3());
			}
		)+
		(
			otherlv_4='='
			{
				newLeafNode(otherlv_4, grammarAccess.getRuleAccess().getEqualsSignKeyword_4());
			}
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getPriorityEIntParserRuleCall_5_0());
				}
				lv_priority_5_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"priority",
						lv_priority_5_0,
						"ime.xtext.radioDsl.Dsl.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_6='rule'
			{
				newLeafNode(otherlv_6, grammarAccess.getRuleAccess().getRuleKeyword_6());
			}
		)+
		(
			otherlv_7='='
			{
				newLeafNode(otherlv_7, grammarAccess.getRuleAccess().getEqualsSignKeyword_7());
			}
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getLeftsideLeftSideParserRuleCall_8_0());
				}
				lv_leftside_8_0=ruleLeftSide
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"leftside",
						lv_leftside_8_0,
						"ime.xtext.radioDsl.Dsl.LeftSide");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_9='-->'
		{
			newLeafNode(otherlv_9, grammarAccess.getRuleAccess().getHyphenMinusHyphenMinusGreaterThanSignKeyword_9());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getRightsideRightSideParserRuleCall_10_0());
				}
				lv_rightside_10_0=ruleRightSide
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"rightside",
						lv_rightside_10_0,
						"ime.xtext.radioDsl.Dsl.RightSide");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_11='}'
		{
			newLeafNode(otherlv_11, grammarAccess.getRuleAccess().getRightCurlyBracketKeyword_11());
		}
	)
;

// Entry rule entryRuleSimpleExp
entryRuleSimpleExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleExpRule()); }
	iv_ruleSimpleExp=ruleSimpleExp
	{ $current=$iv_ruleSimpleExp.current; }
	EOF;

// Rule SimpleExp
ruleSimpleExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSimpleExpAccess().getPrecedingLogicOpLogicOpEnumRuleCall_0_0_0());
					}
					lv_PrecedingLogicOp_0_0=ruleLogicOp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimpleExpRule());
						}
						set(
							$current,
							"PrecedingLogicOp",
							lv_PrecedingLogicOp_0_0,
							"ime.xtext.radioDsl.Dsl.LogicOp");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getSimpleExpAccess().getLeftParenthesisKeyword_0_1());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getSimpleExpAccess().getOperandOperandNumParserRuleCall_0_2_0_0());
						}
						lv_operand_2_0=ruleOperandNum
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSimpleExpRule());
							}
							add(
								$current,
								"operand",
								lv_operand_2_0,
								"ime.xtext.radioDsl.Dsl.OperandNum");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getSimpleExpAccess().getOperatorOperatorNumParserRuleCall_0_2_1_0());
						}
						lv_operator_3_0=ruleOperatorNum
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSimpleExpRule());
							}
							set(
								$current,
								"operator",
								lv_operator_3_0,
								"ime.xtext.radioDsl.Dsl.OperatorNum");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getSimpleExpAccess().getOperandOperandNumParserRuleCall_0_2_2_0());
						}
						lv_operand_4_0=ruleOperandNum
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSimpleExpRule());
							}
							add(
								$current,
								"operand",
								lv_operand_4_0,
								"ime.xtext.radioDsl.Dsl.OperandNum");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getSimpleExpAccess().getRightParenthesisKeyword_0_3());
			}
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSimpleExpAccess().getPrecedingLogicOpLogicOpEnumRuleCall_1_0_0());
					}
					lv_PrecedingLogicOp_6_0=ruleLogicOp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimpleExpRule());
						}
						set(
							$current,
							"PrecedingLogicOp",
							lv_PrecedingLogicOp_6_0,
							"ime.xtext.radioDsl.Dsl.LogicOp");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_7='('
			{
				newLeafNode(otherlv_7, grammarAccess.getSimpleExpAccess().getLeftParenthesisKeyword_1_1());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getSimpleExpAccess().getOperandOperandStringParserRuleCall_1_2_0_0());
						}
						lv_operand_8_0=ruleOperandString
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSimpleExpRule());
							}
							add(
								$current,
								"operand",
								lv_operand_8_0,
								"ime.xtext.radioDsl.Dsl.OperandString");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getSimpleExpAccess().getOperatorOperatorStringParserRuleCall_1_2_1_0());
						}
						lv_operator_9_0=ruleOperatorString
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSimpleExpRule());
							}
							set(
								$current,
								"operator",
								lv_operator_9_0,
								"ime.xtext.radioDsl.Dsl.OperatorString");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getSimpleExpAccess().getOperandOperandStringParserRuleCall_1_2_2_0());
						}
						lv_operand_10_0=ruleOperandString
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSimpleExpRule());
							}
							add(
								$current,
								"operand",
								lv_operand_10_0,
								"ime.xtext.radioDsl.Dsl.OperandString");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			otherlv_11=')'
			{
				newLeafNode(otherlv_11, grammarAccess.getSimpleExpAccess().getRightParenthesisKeyword_1_3());
			}
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSimpleExpAccess().getPrecedingLogicOpLogicOpEnumRuleCall_2_0_0());
					}
					lv_PrecedingLogicOp_12_0=ruleLogicOp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimpleExpRule());
						}
						set(
							$current,
							"PrecedingLogicOp",
							lv_PrecedingLogicOp_12_0,
							"ime.xtext.radioDsl.Dsl.LogicOp");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_13='('
			{
				newLeafNode(otherlv_13, grammarAccess.getSimpleExpAccess().getLeftParenthesisKeyword_2_1());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getSimpleExpAccess().getOperandOperandBoolParserRuleCall_2_2_0_0());
						}
						lv_operand_14_0=ruleOperandBool
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSimpleExpRule());
							}
							add(
								$current,
								"operand",
								lv_operand_14_0,
								"ime.xtext.radioDsl.Dsl.OperandBool");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getSimpleExpAccess().getOperatorOperatorStringParserRuleCall_2_2_1_0());
						}
						lv_operator_15_0=ruleOperatorString
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSimpleExpRule());
							}
							set(
								$current,
								"operator",
								lv_operator_15_0,
								"ime.xtext.radioDsl.Dsl.OperatorString");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getSimpleExpAccess().getOperandOperandBoolParserRuleCall_2_2_2_0());
						}
						lv_operand_16_0=ruleOperandBool
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSimpleExpRule());
							}
							add(
								$current,
								"operand",
								lv_operand_16_0,
								"ime.xtext.radioDsl.Dsl.OperandBool");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			otherlv_17=')'
			{
				newLeafNode(otherlv_17, grammarAccess.getSimpleExpAccess().getRightParenthesisKeyword_2_3());
			}
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSimpleExpAccess().getPrecedingLogicOpLogicOpEnumRuleCall_3_0_0());
					}
					lv_PrecedingLogicOp_18_0=ruleLogicOp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimpleExpRule());
						}
						set(
							$current,
							"PrecedingLogicOp",
							lv_PrecedingLogicOp_18_0,
							"ime.xtext.radioDsl.Dsl.LogicOp");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_19='('
			{
				newLeafNode(otherlv_19, grammarAccess.getSimpleExpAccess().getLeftParenthesisKeyword_3_1());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getSimpleExpAccess().getOperatorOperatorBoolBeforeParserRuleCall_3_2_0_0());
						}
						lv_operator_20_0=ruleOperatorBoolBefore
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSimpleExpRule());
							}
							set(
								$current,
								"operator",
								lv_operator_20_0,
								"ime.xtext.radioDsl.Dsl.OperatorBoolBefore");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getSimpleExpAccess().getOperandOperandBoolParserRuleCall_3_2_1_0());
						}
						lv_operand_21_0=ruleOperandBool
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSimpleExpRule());
							}
							add(
								$current,
								"operand",
								lv_operand_21_0,
								"ime.xtext.radioDsl.Dsl.OperandBool");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			otherlv_22=')'
			{
				newLeafNode(otherlv_22, grammarAccess.getSimpleExpAccess().getRightParenthesisKeyword_3_3());
			}
		)
	)
;

// Entry rule entryRuleCompoundExp
entryRuleCompoundExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompoundExpRule()); }
	iv_ruleCompoundExp=ruleCompoundExp
	{ $current=$iv_ruleCompoundExp.current; }
	EOF;

// Rule CompoundExp
ruleCompoundExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCompoundExpAccess().getPrecedingLogicOpLogicOpEnumRuleCall_0_0());
				}
				lv_PrecedingLogicOp_0_0=ruleLogicOp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompoundExpRule());
					}
					set(
						$current,
						"PrecedingLogicOp",
						lv_PrecedingLogicOp_0_0,
						"ime.xtext.radioDsl.Dsl.LogicOp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getCompoundExpAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCompoundExpAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompoundExpRule());
					}
					add(
						$current,
						"expression",
						lv_expression_2_0,
						"ime.xtext.radioDsl.Dsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCompoundExpAccess().getExpressionExpressionParserRuleCall_3_0());
				}
				lv_expression_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompoundExpRule());
					}
					add(
						$current,
						"expression",
						lv_expression_3_0,
						"ime.xtext.radioDsl.Dsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getCompoundExpAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleLogic
entryRuleLogic returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicRule()); }
	iv_ruleLogic=ruleLogic
	{ $current=$iv_ruleLogic.current; }
	EOF;

// Rule Logic
ruleLogic returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getLogicAccess().getOperationLogicOpEnumRuleCall_0());
			}
			lv_Operation_0_0=ruleLogicOp
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getLogicRule());
				}
				set(
					$current,
					"Operation",
					lv_Operation_0_0,
					"ime.xtext.radioDsl.Dsl.LogicOp");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleLogicMiddle
entryRuleLogicMiddle returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicMiddleRule()); }
	iv_ruleLogicMiddle=ruleLogicMiddle
	{ $current=$iv_ruleLogicMiddle.current; }
	EOF;

// Rule LogicMiddle
ruleLogicMiddle returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getLogicMiddleAccess().getOperationLogicOpMiddleEnumRuleCall_0());
			}
			lv_Operation_0_0=ruleLogicOpMiddle
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getLogicMiddleRule());
				}
				set(
					$current,
					"Operation",
					lv_Operation_0_0,
					"ime.xtext.radioDsl.Dsl.LogicOpMiddle");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleLogicBefore
entryRuleLogicBefore returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicBeforeRule()); }
	iv_ruleLogicBefore=ruleLogicBefore
	{ $current=$iv_ruleLogicBefore.current; }
	EOF;

// Rule LogicBefore
ruleLogicBefore returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getLogicBeforeAccess().getOperationLogicOpBeforeEnumRuleCall_0());
			}
			lv_Operation_0_0=ruleLogicOpBefore
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getLogicBeforeRule());
				}
				set(
					$current,
					"Operation",
					lv_Operation_0_0,
					"ime.xtext.radioDsl.Dsl.LogicOpBefore");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleComparator
entryRuleComparator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparatorRule()); }
	iv_ruleComparator=ruleComparator
	{ $current=$iv_ruleComparator.current; }
	EOF;

// Rule Comparator
ruleComparator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getComparatorAccess().getOperationCompOpEnumRuleCall_0());
			}
			lv_Operation_0_0=ruleCompOp
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getComparatorRule());
				}
				set(
					$current,
					"Operation",
					lv_Operation_0_0,
					"ime.xtext.radioDsl.Dsl.CompOp");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleComparatorString
entryRuleComparatorString returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparatorStringRule()); }
	iv_ruleComparatorString=ruleComparatorString
	{ $current=$iv_ruleComparatorString.current; }
	EOF;

// Rule ComparatorString
ruleComparatorString returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getComparatorStringAccess().getOperationCompOpStringEnumRuleCall_0());
			}
			lv_Operation_0_0=ruleCompOpString
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getComparatorStringRule());
				}
				set(
					$current,
					"Operation",
					lv_Operation_0_0,
					"ime.xtext.radioDsl.Dsl.CompOpString");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleComparatorBool
entryRuleComparatorBool returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparatorBoolRule()); }
	iv_ruleComparatorBool=ruleComparatorBool
	{ $current=$iv_ruleComparatorBool.current; }
	EOF;

// Rule ComparatorBool
ruleComparatorBool returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getComparatorBoolAccess().getOperationCompOpBoolEnumRuleCall_0());
			}
			lv_Operation_0_0=ruleCompOpBool
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getComparatorBoolRule());
				}
				set(
					$current,
					"Operation",
					lv_Operation_0_0,
					"ime.xtext.radioDsl.Dsl.CompOpBool");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleMath
entryRuleMath returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMathRule()); }
	iv_ruleMath=ruleMath
	{ $current=$iv_ruleMath.current; }
	EOF;

// Rule Math
ruleMath returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getMathAccess().getOperationMathOpEnumRuleCall_0());
			}
			lv_Operation_0_0=ruleMathOp
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getMathRule());
				}
				set(
					$current,
					"Operation",
					lv_Operation_0_0,
					"ime.xtext.radioDsl.Dsl.MathOp");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_INT_0=RULE_INT
	{
		$current.merge(this_INT_0);
	}
	{
		newLeafNode(this_INT_0, grammarAccess.getEIntAccess().getINTTerminalRuleCall());
	}
;

// Entry rule entryRuleNum
entryRuleNum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumRule()); }
	iv_ruleNum=ruleNum
	{ $current=$iv_ruleNum.current; }
	EOF;

// Rule Num
ruleNum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getNumAccess().getValueEDoubleParserRuleCall_0());
			}
			lv_value_0_0=ruleEDouble
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getNumRule());
				}
				set(
					$current,
					"value",
					lv_value_0_0,
					"ime.xtext.radioDsl.Dsl.EDouble");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleStrings
entryRuleStrings returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringsRule()); }
	iv_ruleStrings=ruleStrings
	{ $current=$iv_ruleStrings.current; }
	EOF;

// Rule Strings
ruleStrings returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getStringsAccess().getValueEStringParserRuleCall_0());
			}
			lv_value_0_0=ruleEString
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getStringsRule());
				}
				set(
					$current,
					"value",
					lv_value_0_0,
					"ime.xtext.radioDsl.Dsl.EString");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleBool
entryRuleBool returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolRule()); }
	iv_ruleBool=ruleBool
	{ $current=$iv_ruleBool.current; }
	EOF;

// Rule Bool
ruleBool returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getBoolAccess().getValueEBooleanParserRuleCall_0());
			}
			lv_value_0_0=ruleEBoolean
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getBoolRule());
				}
				set(
					$current,
					"value",
					lv_value_0_0,
					"ime.xtext.radioDsl.Dsl.EBoolean");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleBoolAttributes
entryRuleBoolAttributes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolAttributesRule()); }
	iv_ruleBoolAttributes=ruleBoolAttributes
	{ $current=$iv_ruleBoolAttributes.current; }
	EOF;

// Rule BoolAttributes
ruleBoolAttributes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getBoolAttributesAccess().getBoolAttrBoolAttrEnumRuleCall_0());
			}
			lv_boolAttr_0_0=ruleBoolAttr
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getBoolAttributesRule());
				}
				set(
					$current,
					"boolAttr",
					lv_boolAttr_0_0,
					"ime.xtext.radioDsl.Dsl.BoolAttr");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleStringAttributes
entryRuleStringAttributes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringAttributesRule()); }
	iv_ruleStringAttributes=ruleStringAttributes
	{ $current=$iv_ruleStringAttributes.current; }
	EOF;

// Rule StringAttributes
ruleStringAttributes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getStringAttributesAccess().getStringAttrStringAttrEnumRuleCall_0());
			}
			lv_stringAttr_0_0=ruleStringAttr
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getStringAttributesRule());
				}
				set(
					$current,
					"stringAttr",
					lv_stringAttr_0_0,
					"ime.xtext.radioDsl.Dsl.StringAttr");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleNumAttributes
entryRuleNumAttributes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumAttributesRule()); }
	iv_ruleNumAttributes=ruleNumAttributes
	{ $current=$iv_ruleNumAttributes.current; }
	EOF;

// Rule NumAttributes
ruleNumAttributes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getNumAttributesAccess().getNumAttrNumAttrEnumRuleCall_0());
			}
			lv_numAttr_0_0=ruleNumAttr
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getNumAttributesRule());
				}
				set(
					$current,
					"numAttr",
					lv_numAttr_0_0,
					"ime.xtext.radioDsl.Dsl.NumAttr");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleEDouble
entryRuleEDouble returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEDoubleRule()); }
	iv_ruleEDouble=ruleEDouble
	{ $current=$iv_ruleEDouble.current.getText(); }
	EOF;

// Rule EDouble
ruleEDouble returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEDoubleAccess().getHyphenMinusKeyword_0());
			}
		)?
		(
			this_INT_1=RULE_INT
			{
				$current.merge(this_INT_1);
			}
			{
				newLeafNode(this_INT_1, grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_1());
			}
		)?
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEDoubleAccess().getFullStopKeyword_2());
		}
		this_INT_3=RULE_INT
		{
			$current.merge(this_INT_3);
		}
		{
			newLeafNode(this_INT_3, grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_3());
		}
		(
			(
				kw='E'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEDoubleAccess().getEKeyword_4_0_0());
				}
				    |
				kw='e'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEDoubleAccess().getEKeyword_4_0_1());
				}
			)
			(
				kw='-'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEDoubleAccess().getHyphenMinusKeyword_4_1());
				}
			)?
			this_INT_7=RULE_INT
			{
				$current.merge(this_INT_7);
			}
			{
				newLeafNode(this_INT_7, grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_4_2());
			}
		)?
	)
;

// Entry rule entryRuleEBoolean
entryRuleEBoolean returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEBooleanRule()); }
	iv_ruleEBoolean=ruleEBoolean
	{ $current=$iv_ruleEBoolean.current.getText(); }
	EOF;

// Rule EBoolean
ruleEBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='true'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEBooleanAccess().getTrueKeyword_0());
		}
		    |
		kw='false'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEBooleanAccess().getFalseKeyword_1());
		}
	)
;

// Entry rule entryRuleActionRadio
entryRuleActionRadio returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionRadioRule()); }
	iv_ruleActionRadio=ruleActionRadio
	{ $current=$iv_ruleActionRadio.current; }
	EOF;

// Rule ActionRadio
ruleActionRadio returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getActionRadioAccess().getNewStateRadioModesEnumRuleCall_0());
			}
			lv_newState_0_0=ruleRadioModes
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getActionRadioRule());
				}
				set(
					$current,
					"newState",
					lv_newState_0_0,
					"ime.xtext.radioDsl.Dsl.RadioModes");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Rule LogicOp
ruleLogicOp returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='_'
			{
				$current = grammarAccess.getLogicOpAccess().getNoneEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getLogicOpAccess().getNoneEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='and'
			{
				$current = grammarAccess.getLogicOpAccess().getAndEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getLogicOpAccess().getAndEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='or'
			{
				$current = grammarAccess.getLogicOpAccess().getOrEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getLogicOpAccess().getOrEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='not'
			{
				$current = grammarAccess.getLogicOpAccess().getNotEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getLogicOpAccess().getNotEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule LogicOpMiddle
ruleLogicOpMiddle returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='and'
			{
				$current = grammarAccess.getLogicOpMiddleAccess().getAndEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getLogicOpMiddleAccess().getAndEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='or'
			{
				$current = grammarAccess.getLogicOpMiddleAccess().getOrEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getLogicOpMiddleAccess().getOrEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule LogicOpBefore
ruleLogicOpBefore returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='_'
			{
				$current = grammarAccess.getLogicOpBeforeAccess().getNoneEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getLogicOpBeforeAccess().getNoneEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='not'
			{
				$current = grammarAccess.getLogicOpBeforeAccess().getNotEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getLogicOpBeforeAccess().getNotEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule CompOp
ruleCompOp returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='>'
			{
				$current = grammarAccess.getCompOpAccess().getGreaterEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCompOpAccess().getGreaterEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='>='
			{
				$current = grammarAccess.getCompOpAccess().getGreater_equalEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCompOpAccess().getGreater_equalEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='<'
			{
				$current = grammarAccess.getCompOpAccess().getLessEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getCompOpAccess().getLessEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='<='
			{
				$current = grammarAccess.getCompOpAccess().getLess_equalEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getCompOpAccess().getLess_equalEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='='
			{
				$current = grammarAccess.getCompOpAccess().getEqualEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getCompOpAccess().getEqualEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='!='
			{
				$current = grammarAccess.getCompOpAccess().getNot_equalEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getCompOpAccess().getNot_equalEnumLiteralDeclaration_5());
			}
		)
	)
;

// Rule CompOpString
ruleCompOpString returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='='
			{
				$current = grammarAccess.getCompOpStringAccess().getEqualEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCompOpStringAccess().getEqualEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='!='
			{
				$current = grammarAccess.getCompOpStringAccess().getNot_equalEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCompOpStringAccess().getNot_equalEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule CompOpBool
ruleCompOpBool returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='='
			{
				$current = grammarAccess.getCompOpBoolAccess().getEqualEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCompOpBoolAccess().getEqualEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='!='
			{
				$current = grammarAccess.getCompOpBoolAccess().getNot_equalEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCompOpBoolAccess().getNot_equalEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule MathOp
ruleMathOp returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='+'
			{
				$current = grammarAccess.getMathOpAccess().getPlusEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMathOpAccess().getPlusEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='-'
			{
				$current = grammarAccess.getMathOpAccess().getMinusEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMathOpAccess().getMinusEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='/'
			{
				$current = grammarAccess.getMathOpAccess().getDividedEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getMathOpAccess().getDividedEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='*'
			{
				$current = grammarAccess.getMathOpAccess().getMultiplicationEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getMathOpAccess().getMultiplicationEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule BoolAttr
ruleBoolAttr returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='SNRValues_ASC'
			{
				$current = grammarAccess.getBoolAttrAccess().getSNRValues_ASCEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getBoolAttrAccess().getSNRValues_ASCEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='SNRValues_DESC'
			{
				$current = grammarAccess.getBoolAttrAccess().getSNRValues_DESCEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getBoolAttrAccess().getSNRValues_DESCEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule StringAttr
ruleStringAttr returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='OperationalRole'
		{
			$current = grammarAccess.getStringAttrAccess().getOpRoleEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getStringAttrAccess().getOpRoleEnumLiteralDeclaration());
		}
	)
;

// Rule NumAttr
ruleNumAttr returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='SecurityLevel'
			{
				$current = grammarAccess.getNumAttrAccess().getSecLevelEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getNumAttrAccess().getSecLevelEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='CarrierFrequency'
			{
				$current = grammarAccess.getNumAttrAccess().getCarrierFreqEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getNumAttrAccess().getCarrierFreqEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule RadioModes
ruleRadioModes returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='SILENT_MODE'
			{
				$current = grammarAccess.getRadioModesAccess().getSILENT_MODEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getRadioModesAccess().getSILENT_MODEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='ALERT_MODE'
			{
				$current = grammarAccess.getRadioModesAccess().getALERT_MODEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getRadioModesAccess().getALERT_MODEEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='FULLDUPLEX_MODE'
			{
				$current = grammarAccess.getRadioModesAccess().getFULLDUPLEX_MODEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getRadioModesAccess().getFULLDUPLEX_MODEEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='NORMAL_MODE'
			{
				$current = grammarAccess.getRadioModesAccess().getNORMAL_MODEEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getRadioModesAccess().getNORMAL_MODEEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='MAINTAIN_CURRENT_MODE'
			{
				$current = grammarAccess.getRadioModesAccess().getMAINTAIN_CURRENT_MODEEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getRadioModesAccess().getMAINTAIN_CURRENT_MODEEnumLiteralDeclaration_4());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
