// automatically generated by Xtext
grammar ime.xtext.radioDsl.Dsl with org.eclipse.xtext.common.Terminals

import "http://action/1.0" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

RuleSet returns RuleSet:
	{RuleSet}
	'RuleSet'
	'{'
		('rule' '{' rule+=Rule ( "," rule+=Rule)* '}' )?
	'}';


LeftSide returns LeftSide:
	LeftSide_Impl | SimpleExp | CompoundExp | Expression_Impl;

RightSide returns RightSide:
	RightSide_Impl | ActionRadio;

Operator returns Operator:
	Logic | Comparator | Maths;

Operand returns Operand:
	Num | Strings | BoolAttributes | StringAttributes | NumAttributes | Bool;

Expression returns Expression:
	Expression_Impl | SimpleExp | CompoundExp;

Rule returns Rule:
	'Rule'
	priority=EInt
	'{'
		'name' name=EString
		'leftside' leftside=LeftSide
		'rightside' rightside=RightSide
	'}';

LeftSide_Impl returns LeftSide:
	{LeftSide}
	'LeftSide'
	;

RightSide_Impl returns RightSide:
	{RightSide}
	'RightSide'
	;

EString returns ecore::EString:
	STRING | ID;

EInt returns ecore::EInt:
	'-'? INT;

SimpleExp returns SimpleExp:
	'SimpleExp'
	'{'
		'PrecedingLogicOp' PrecedingLogicOp=LogicOp
		'operator' operator=Operator
		'operand' '{' operand+=Operand ( "," operand+=Operand)* '}' 
	'}';

CompoundExp returns CompoundExp:
	'CompoundExp'
	'{'
		'PrecedingLogicOp' PrecedingLogicOp=LogicOp
		'expression' '{' expression+=Expression ( "," expression+=Expression)* '}' 
	'}';

Expression_Impl returns Expression:
	{Expression}
	'Expression'
	;

enum LogicOp returns LogicOp:
				None = 'None' | and = 'and' | or = 'or' | not = 'not';

Logic returns Logic:
	'Logic'
	'{'
		'Operation' Operation=LogicOp
	'}';

Comparator returns Comparator:
	'Comparator'
	'{'
		'Operation' Operation=CompOp
	'}';

Maths returns Math:
	'Maths'
	'{'
		'Operation' Operation=MathOp
	'}';

enum CompOp returns CompOp:
				greater = 'greater' | greater_equal = 'greater_equal' | less = 'less' | less_equal = 'less_equal' | equal = 'equal' | not_equal = 'not_equal';

enum MathOp returns MathOp:
				plus = 'plus' | minus = 'minus' | divided = 'divided' | multiplication = 'multiplication';

Num returns Num:
	'Num'
	'{'
		'value' value=EDouble
	'}';

Strings returns Strings:
	'Strings'
	'{'
		'value' value=EString
	'}';

BoolAttributes returns BoolAttributes:
	'BoolAttributes'
	'{'
		'boolAttr' boolAttr=BoolAttr
	'}';

StringAttributes returns StringAttributes:
	'StringAttributes'
	'{'
		'stringAttr' stringAttr=StringAttr
	'}';

NumAttributes returns NumAttributes:
	'NumAttributes'
	'{'
		'numAttr' numAttr=NumAttr
	'}';

Bool returns Bool:
	value?='value'
	'Bool'
	;

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

enum BoolAttr returns BoolAttr:
				SNRValues_ASC = 'SNRValues_ASC' | SNRValues_DESC = 'SNRValues_DESC';

enum StringAttr returns StringAttr:
				OpRole = 'OpRole';

enum NumAttr returns NumAttr:
				SecLevel = 'SecLevel' | CarrierFreq = 'CarrierFreq';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

ActionRadio returns ActionRadio:
	'ActionRadio'
	'{'
		'newState' newState=RadioModes
	'}';

enum RadioModes returns RadioModes:
				SILENT_MODE = 'SILENT_MODE' | ALERT_MODE = 'ALERT_MODE' | FULLDUPLEX_MODE = 'FULLDUPLEX_MODE' | NORMAL_MODE = 'NORMAL_MODE' | MAINTAIN_CURRENT_MODE = 'MAINTAIN_CURRENT_MODE';
