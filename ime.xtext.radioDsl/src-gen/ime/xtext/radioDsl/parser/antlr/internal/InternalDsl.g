/*
 * generated by Xtext 2.24.0
 */
grammar InternalDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package ime.xtext.radioDsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package ime.xtext.radioDsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import ime.xtext.radioDsl.services.DslGrammarAccess;

}

@parser::members {

 	private DslGrammarAccess grammarAccess;

    public InternalDslParser(TokenStream input, DslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "RuleSet";
   	}

   	@Override
   	protected DslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleRuleSet
entryRuleRuleSet returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleSetRule()); }
	iv_ruleRuleSet=ruleRuleSet
	{ $current=$iv_ruleRuleSet.current; }
	EOF;

// Rule RuleSet
ruleRuleSet returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRuleSetAccess().getRuleSetAction_0(),
					$current);
			}
		)
		otherlv_1='RuleSet'
		{
			newLeafNode(otherlv_1, grammarAccess.getRuleSetAccess().getRuleSetKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getRuleSetAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='rule'
			{
				newLeafNode(otherlv_3, grammarAccess.getRuleSetAccess().getRuleKeyword_3_0());
			}
			otherlv_4='{'
			{
				newLeafNode(otherlv_4, grammarAccess.getRuleSetAccess().getLeftCurlyBracketKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRuleSetAccess().getRuleRuleParserRuleCall_3_2_0());
					}
					lv_rule_5_0=ruleRule
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRuleSetRule());
						}
						add(
							$current,
							"rule",
							lv_rule_5_0,
							"ime.xtext.radioDsl.Dsl.Rule");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_6=','
				{
					newLeafNode(otherlv_6, grammarAccess.getRuleSetAccess().getCommaKeyword_3_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getRuleSetAccess().getRuleRuleParserRuleCall_3_3_1_0());
						}
						lv_rule_7_0=ruleRule
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRuleSetRule());
							}
							add(
								$current,
								"rule",
								lv_rule_7_0,
								"ime.xtext.radioDsl.Dsl.Rule");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_8='}'
			{
				newLeafNode(otherlv_8, grammarAccess.getRuleSetAccess().getRightCurlyBracketKeyword_3_4());
			}
		)?
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getRuleSetAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleLeftSide
entryRuleLeftSide returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLeftSideRule()); }
	iv_ruleLeftSide=ruleLeftSide
	{ $current=$iv_ruleLeftSide.current; }
	EOF;

// Rule LeftSide
ruleLeftSide returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLeftSideAccess().getLeftSide_ImplParserRuleCall_0());
		}
		this_LeftSide_Impl_0=ruleLeftSide_Impl
		{
			$current = $this_LeftSide_Impl_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLeftSideAccess().getSimpleExpParserRuleCall_1());
		}
		this_SimpleExp_1=ruleSimpleExp
		{
			$current = $this_SimpleExp_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLeftSideAccess().getCompoundExpParserRuleCall_2());
		}
		this_CompoundExp_2=ruleCompoundExp
		{
			$current = $this_CompoundExp_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLeftSideAccess().getExpression_ImplParserRuleCall_3());
		}
		this_Expression_Impl_3=ruleExpression_Impl
		{
			$current = $this_Expression_Impl_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRightSide
entryRuleRightSide returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRightSideRule()); }
	iv_ruleRightSide=ruleRightSide
	{ $current=$iv_ruleRightSide.current; }
	EOF;

// Rule RightSide
ruleRightSide returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRightSideAccess().getRightSide_ImplParserRuleCall_0());
		}
		this_RightSide_Impl_0=ruleRightSide_Impl
		{
			$current = $this_RightSide_Impl_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRightSideAccess().getActionRadioParserRuleCall_1());
		}
		this_ActionRadio_1=ruleActionRadio
		{
			$current = $this_ActionRadio_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleOperator
entryRuleOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperatorRule()); }
	iv_ruleOperator=ruleOperator
	{ $current=$iv_ruleOperator.current; }
	EOF;

// Rule Operator
ruleOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOperatorAccess().getLogicParserRuleCall_0());
		}
		this_Logic_0=ruleLogic
		{
			$current = $this_Logic_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperatorAccess().getComparatorParserRuleCall_1());
		}
		this_Comparator_1=ruleComparator
		{
			$current = $this_Comparator_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperatorAccess().getMathsParserRuleCall_2());
		}
		this_Maths_2=ruleMaths
		{
			$current = $this_Maths_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleOperand
entryRuleOperand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperandRule()); }
	iv_ruleOperand=ruleOperand
	{ $current=$iv_ruleOperand.current; }
	EOF;

// Rule Operand
ruleOperand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOperandAccess().getNumParserRuleCall_0());
		}
		this_Num_0=ruleNum
		{
			$current = $this_Num_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperandAccess().getStringsParserRuleCall_1());
		}
		this_Strings_1=ruleStrings
		{
			$current = $this_Strings_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperandAccess().getBoolAttributesParserRuleCall_2());
		}
		this_BoolAttributes_2=ruleBoolAttributes
		{
			$current = $this_BoolAttributes_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperandAccess().getStringAttributesParserRuleCall_3());
		}
		this_StringAttributes_3=ruleStringAttributes
		{
			$current = $this_StringAttributes_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperandAccess().getNumAttributesParserRuleCall_4());
		}
		this_NumAttributes_4=ruleNumAttributes
		{
			$current = $this_NumAttributes_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperandAccess().getBoolParserRuleCall_5());
		}
		this_Bool_5=ruleBool
		{
			$current = $this_Bool_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getExpression_ImplParserRuleCall_0());
		}
		this_Expression_Impl_0=ruleExpression_Impl
		{
			$current = $this_Expression_Impl_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getSimpleExpParserRuleCall_1());
		}
		this_SimpleExp_1=ruleSimpleExp
		{
			$current = $this_SimpleExp_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getCompoundExpParserRuleCall_2());
		}
		this_CompoundExp_2=ruleCompoundExp
		{
			$current = $this_CompoundExp_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	iv_ruleRule=ruleRule
	{ $current=$iv_ruleRule.current; }
	EOF;

// Rule Rule
ruleRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Rule'
		{
			newLeafNode(otherlv_0, grammarAccess.getRuleAccess().getRuleKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getPriorityEIntParserRuleCall_1_0());
				}
				lv_priority_1_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"priority",
						lv_priority_1_0,
						"ime.xtext.radioDsl.Dsl.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getRuleAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='name'
		{
			newLeafNode(otherlv_3, grammarAccess.getRuleAccess().getNameKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getNameEStringParserRuleCall_4_0());
				}
				lv_name_4_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"name",
						lv_name_4_0,
						"ime.xtext.radioDsl.Dsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='leftside'
		{
			newLeafNode(otherlv_5, grammarAccess.getRuleAccess().getLeftsideKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getLeftsideLeftSideParserRuleCall_6_0());
				}
				lv_leftside_6_0=ruleLeftSide
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"leftside",
						lv_leftside_6_0,
						"ime.xtext.radioDsl.Dsl.LeftSide");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7='rightside'
		{
			newLeafNode(otherlv_7, grammarAccess.getRuleAccess().getRightsideKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getRightsideRightSideParserRuleCall_8_0());
				}
				lv_rightside_8_0=ruleRightSide
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"rightside",
						lv_rightside_8_0,
						"ime.xtext.radioDsl.Dsl.RightSide");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getRuleAccess().getRightCurlyBracketKeyword_9());
		}
	)
;

// Entry rule entryRuleLeftSide_Impl
entryRuleLeftSide_Impl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLeftSide_ImplRule()); }
	iv_ruleLeftSide_Impl=ruleLeftSide_Impl
	{ $current=$iv_ruleLeftSide_Impl.current; }
	EOF;

// Rule LeftSide_Impl
ruleLeftSide_Impl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLeftSide_ImplAccess().getLeftSideAction_0(),
					$current);
			}
		)
		otherlv_1='LeftSide'
		{
			newLeafNode(otherlv_1, grammarAccess.getLeftSide_ImplAccess().getLeftSideKeyword_1());
		}
	)
;

// Entry rule entryRuleRightSide_Impl
entryRuleRightSide_Impl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRightSide_ImplRule()); }
	iv_ruleRightSide_Impl=ruleRightSide_Impl
	{ $current=$iv_ruleRightSide_Impl.current; }
	EOF;

// Rule RightSide_Impl
ruleRightSide_Impl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRightSide_ImplAccess().getRightSideAction_0(),
					$current);
			}
		)
		otherlv_1='RightSide'
		{
			newLeafNode(otherlv_1, grammarAccess.getRightSide_ImplAccess().getRightSideKeyword_1());
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleSimpleExp
entryRuleSimpleExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleExpRule()); }
	iv_ruleSimpleExp=ruleSimpleExp
	{ $current=$iv_ruleSimpleExp.current; }
	EOF;

// Rule SimpleExp
ruleSimpleExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='SimpleExp'
		{
			newLeafNode(otherlv_0, grammarAccess.getSimpleExpAccess().getSimpleExpKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getSimpleExpAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='PrecedingLogicOp'
		{
			newLeafNode(otherlv_2, grammarAccess.getSimpleExpAccess().getPrecedingLogicOpKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleExpAccess().getPrecedingLogicOpLogicOpEnumRuleCall_3_0());
				}
				lv_PrecedingLogicOp_3_0=ruleLogicOp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleExpRule());
					}
					set(
						$current,
						"PrecedingLogicOp",
						lv_PrecedingLogicOp_3_0,
						"ime.xtext.radioDsl.Dsl.LogicOp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='operator'
		{
			newLeafNode(otherlv_4, grammarAccess.getSimpleExpAccess().getOperatorKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleExpAccess().getOperatorOperatorParserRuleCall_5_0());
				}
				lv_operator_5_0=ruleOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleExpRule());
					}
					set(
						$current,
						"operator",
						lv_operator_5_0,
						"ime.xtext.radioDsl.Dsl.Operator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='operand'
		{
			newLeafNode(otherlv_6, grammarAccess.getSimpleExpAccess().getOperandKeyword_6());
		}
		otherlv_7='{'
		{
			newLeafNode(otherlv_7, grammarAccess.getSimpleExpAccess().getLeftCurlyBracketKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleExpAccess().getOperandOperandParserRuleCall_8_0());
				}
				lv_operand_8_0=ruleOperand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleExpRule());
					}
					add(
						$current,
						"operand",
						lv_operand_8_0,
						"ime.xtext.radioDsl.Dsl.Operand");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_9=','
			{
				newLeafNode(otherlv_9, grammarAccess.getSimpleExpAccess().getCommaKeyword_9_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSimpleExpAccess().getOperandOperandParserRuleCall_9_1_0());
					}
					lv_operand_10_0=ruleOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimpleExpRule());
						}
						add(
							$current,
							"operand",
							lv_operand_10_0,
							"ime.xtext.radioDsl.Dsl.Operand");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_11='}'
		{
			newLeafNode(otherlv_11, grammarAccess.getSimpleExpAccess().getRightCurlyBracketKeyword_10());
		}
		otherlv_12='}'
		{
			newLeafNode(otherlv_12, grammarAccess.getSimpleExpAccess().getRightCurlyBracketKeyword_11());
		}
	)
;

// Entry rule entryRuleCompoundExp
entryRuleCompoundExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompoundExpRule()); }
	iv_ruleCompoundExp=ruleCompoundExp
	{ $current=$iv_ruleCompoundExp.current; }
	EOF;

// Rule CompoundExp
ruleCompoundExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='CompoundExp'
		{
			newLeafNode(otherlv_0, grammarAccess.getCompoundExpAccess().getCompoundExpKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getCompoundExpAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='PrecedingLogicOp'
		{
			newLeafNode(otherlv_2, grammarAccess.getCompoundExpAccess().getPrecedingLogicOpKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCompoundExpAccess().getPrecedingLogicOpLogicOpEnumRuleCall_3_0());
				}
				lv_PrecedingLogicOp_3_0=ruleLogicOp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompoundExpRule());
					}
					set(
						$current,
						"PrecedingLogicOp",
						lv_PrecedingLogicOp_3_0,
						"ime.xtext.radioDsl.Dsl.LogicOp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='expression'
		{
			newLeafNode(otherlv_4, grammarAccess.getCompoundExpAccess().getExpressionKeyword_4());
		}
		otherlv_5='{'
		{
			newLeafNode(otherlv_5, grammarAccess.getCompoundExpAccess().getLeftCurlyBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCompoundExpAccess().getExpressionExpressionParserRuleCall_6_0());
				}
				lv_expression_6_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompoundExpRule());
					}
					add(
						$current,
						"expression",
						lv_expression_6_0,
						"ime.xtext.radioDsl.Dsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_7=','
			{
				newLeafNode(otherlv_7, grammarAccess.getCompoundExpAccess().getCommaKeyword_7_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCompoundExpAccess().getExpressionExpressionParserRuleCall_7_1_0());
					}
					lv_expression_8_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCompoundExpRule());
						}
						add(
							$current,
							"expression",
							lv_expression_8_0,
							"ime.xtext.radioDsl.Dsl.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getCompoundExpAccess().getRightCurlyBracketKeyword_8());
		}
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getCompoundExpAccess().getRightCurlyBracketKeyword_9());
		}
	)
;

// Entry rule entryRuleExpression_Impl
entryRuleExpression_Impl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpression_ImplRule()); }
	iv_ruleExpression_Impl=ruleExpression_Impl
	{ $current=$iv_ruleExpression_Impl.current; }
	EOF;

// Rule Expression_Impl
ruleExpression_Impl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getExpression_ImplAccess().getExpressionAction_0(),
					$current);
			}
		)
		otherlv_1='Expression'
		{
			newLeafNode(otherlv_1, grammarAccess.getExpression_ImplAccess().getExpressionKeyword_1());
		}
	)
;

// Entry rule entryRuleLogic
entryRuleLogic returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicRule()); }
	iv_ruleLogic=ruleLogic
	{ $current=$iv_ruleLogic.current; }
	EOF;

// Rule Logic
ruleLogic returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Logic'
		{
			newLeafNode(otherlv_0, grammarAccess.getLogicAccess().getLogicKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getLogicAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='Operation'
		{
			newLeafNode(otherlv_2, grammarAccess.getLogicAccess().getOperationKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLogicAccess().getOperationLogicOpEnumRuleCall_3_0());
				}
				lv_Operation_3_0=ruleLogicOp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLogicRule());
					}
					set(
						$current,
						"Operation",
						lv_Operation_3_0,
						"ime.xtext.radioDsl.Dsl.LogicOp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getLogicAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleComparator
entryRuleComparator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparatorRule()); }
	iv_ruleComparator=ruleComparator
	{ $current=$iv_ruleComparator.current; }
	EOF;

// Rule Comparator
ruleComparator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Comparator'
		{
			newLeafNode(otherlv_0, grammarAccess.getComparatorAccess().getComparatorKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getComparatorAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='Operation'
		{
			newLeafNode(otherlv_2, grammarAccess.getComparatorAccess().getOperationKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getComparatorAccess().getOperationCompOpEnumRuleCall_3_0());
				}
				lv_Operation_3_0=ruleCompOp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComparatorRule());
					}
					set(
						$current,
						"Operation",
						lv_Operation_3_0,
						"ime.xtext.radioDsl.Dsl.CompOp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getComparatorAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleMaths
entryRuleMaths returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMathsRule()); }
	iv_ruleMaths=ruleMaths
	{ $current=$iv_ruleMaths.current; }
	EOF;

// Rule Maths
ruleMaths returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Maths'
		{
			newLeafNode(otherlv_0, grammarAccess.getMathsAccess().getMathsKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getMathsAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='Operation'
		{
			newLeafNode(otherlv_2, grammarAccess.getMathsAccess().getOperationKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMathsAccess().getOperationMathOpEnumRuleCall_3_0());
				}
				lv_Operation_3_0=ruleMathOp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMathsRule());
					}
					set(
						$current,
						"Operation",
						lv_Operation_3_0,
						"ime.xtext.radioDsl.Dsl.MathOp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getMathsAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleNum
entryRuleNum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumRule()); }
	iv_ruleNum=ruleNum
	{ $current=$iv_ruleNum.current; }
	EOF;

// Rule Num
ruleNum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Num'
		{
			newLeafNode(otherlv_0, grammarAccess.getNumAccess().getNumKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getNumAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='value'
		{
			newLeafNode(otherlv_2, grammarAccess.getNumAccess().getValueKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNumAccess().getValueEDoubleParserRuleCall_3_0());
				}
				lv_value_3_0=ruleEDouble
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"ime.xtext.radioDsl.Dsl.EDouble");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getNumAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleStrings
entryRuleStrings returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringsRule()); }
	iv_ruleStrings=ruleStrings
	{ $current=$iv_ruleStrings.current; }
	EOF;

// Rule Strings
ruleStrings returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Strings'
		{
			newLeafNode(otherlv_0, grammarAccess.getStringsAccess().getStringsKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getStringsAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='value'
		{
			newLeafNode(otherlv_2, grammarAccess.getStringsAccess().getValueKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStringsAccess().getValueEStringParserRuleCall_3_0());
				}
				lv_value_3_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStringsRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"ime.xtext.radioDsl.Dsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getStringsAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleBoolAttributes
entryRuleBoolAttributes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolAttributesRule()); }
	iv_ruleBoolAttributes=ruleBoolAttributes
	{ $current=$iv_ruleBoolAttributes.current; }
	EOF;

// Rule BoolAttributes
ruleBoolAttributes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='BoolAttributes'
		{
			newLeafNode(otherlv_0, grammarAccess.getBoolAttributesAccess().getBoolAttributesKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getBoolAttributesAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='boolAttr'
		{
			newLeafNode(otherlv_2, grammarAccess.getBoolAttributesAccess().getBoolAttrKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBoolAttributesAccess().getBoolAttrBoolAttrEnumRuleCall_3_0());
				}
				lv_boolAttr_3_0=ruleBoolAttr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBoolAttributesRule());
					}
					set(
						$current,
						"boolAttr",
						lv_boolAttr_3_0,
						"ime.xtext.radioDsl.Dsl.BoolAttr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getBoolAttributesAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleStringAttributes
entryRuleStringAttributes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringAttributesRule()); }
	iv_ruleStringAttributes=ruleStringAttributes
	{ $current=$iv_ruleStringAttributes.current; }
	EOF;

// Rule StringAttributes
ruleStringAttributes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='StringAttributes'
		{
			newLeafNode(otherlv_0, grammarAccess.getStringAttributesAccess().getStringAttributesKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getStringAttributesAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='stringAttr'
		{
			newLeafNode(otherlv_2, grammarAccess.getStringAttributesAccess().getStringAttrKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStringAttributesAccess().getStringAttrStringAttrEnumRuleCall_3_0());
				}
				lv_stringAttr_3_0=ruleStringAttr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStringAttributesRule());
					}
					set(
						$current,
						"stringAttr",
						lv_stringAttr_3_0,
						"ime.xtext.radioDsl.Dsl.StringAttr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getStringAttributesAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleNumAttributes
entryRuleNumAttributes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumAttributesRule()); }
	iv_ruleNumAttributes=ruleNumAttributes
	{ $current=$iv_ruleNumAttributes.current; }
	EOF;

// Rule NumAttributes
ruleNumAttributes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='NumAttributes'
		{
			newLeafNode(otherlv_0, grammarAccess.getNumAttributesAccess().getNumAttributesKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getNumAttributesAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='numAttr'
		{
			newLeafNode(otherlv_2, grammarAccess.getNumAttributesAccess().getNumAttrKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNumAttributesAccess().getNumAttrNumAttrEnumRuleCall_3_0());
				}
				lv_numAttr_3_0=ruleNumAttr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumAttributesRule());
					}
					set(
						$current,
						"numAttr",
						lv_numAttr_3_0,
						"ime.xtext.radioDsl.Dsl.NumAttr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getNumAttributesAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleBool
entryRuleBool returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolRule()); }
	iv_ruleBool=ruleBool
	{ $current=$iv_ruleBool.current; }
	EOF;

// Rule Bool
ruleBool returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_value_0_0='value'
				{
					newLeafNode(lv_value_0_0, grammarAccess.getBoolAccess().getValueValueKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBoolRule());
					}
					setWithLastConsumed($current, "value", lv_value_0_0 != null, "value");
				}
			)
		)
		otherlv_1='Bool'
		{
			newLeafNode(otherlv_1, grammarAccess.getBoolAccess().getBoolKeyword_1());
		}
	)
;

// Entry rule entryRuleEDouble
entryRuleEDouble returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEDoubleRule()); }
	iv_ruleEDouble=ruleEDouble
	{ $current=$iv_ruleEDouble.current.getText(); }
	EOF;

// Rule EDouble
ruleEDouble returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEDoubleAccess().getHyphenMinusKeyword_0());
			}
		)?
		(
			this_INT_1=RULE_INT
			{
				$current.merge(this_INT_1);
			}
			{
				newLeafNode(this_INT_1, grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_1());
			}
		)?
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEDoubleAccess().getFullStopKeyword_2());
		}
		this_INT_3=RULE_INT
		{
			$current.merge(this_INT_3);
		}
		{
			newLeafNode(this_INT_3, grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_3());
		}
		(
			(
				kw='E'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEDoubleAccess().getEKeyword_4_0_0());
				}
				    |
				kw='e'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEDoubleAccess().getEKeyword_4_0_1());
				}
			)
			(
				kw='-'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEDoubleAccess().getHyphenMinusKeyword_4_1());
				}
			)?
			this_INT_7=RULE_INT
			{
				$current.merge(this_INT_7);
			}
			{
				newLeafNode(this_INT_7, grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_4_2());
			}
		)?
	)
;

// Entry rule entryRuleActionRadio
entryRuleActionRadio returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionRadioRule()); }
	iv_ruleActionRadio=ruleActionRadio
	{ $current=$iv_ruleActionRadio.current; }
	EOF;

// Rule ActionRadio
ruleActionRadio returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ActionRadio'
		{
			newLeafNode(otherlv_0, grammarAccess.getActionRadioAccess().getActionRadioKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getActionRadioAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='newState'
		{
			newLeafNode(otherlv_2, grammarAccess.getActionRadioAccess().getNewStateKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getActionRadioAccess().getNewStateRadioModesEnumRuleCall_3_0());
				}
				lv_newState_3_0=ruleRadioModes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionRadioRule());
					}
					set(
						$current,
						"newState",
						lv_newState_3_0,
						"ime.xtext.radioDsl.Dsl.RadioModes");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getActionRadioAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Rule LogicOp
ruleLogicOp returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='None'
			{
				$current = grammarAccess.getLogicOpAccess().getNoneEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getLogicOpAccess().getNoneEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='and'
			{
				$current = grammarAccess.getLogicOpAccess().getAndEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getLogicOpAccess().getAndEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='or'
			{
				$current = grammarAccess.getLogicOpAccess().getOrEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getLogicOpAccess().getOrEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='not'
			{
				$current = grammarAccess.getLogicOpAccess().getNotEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getLogicOpAccess().getNotEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule CompOp
ruleCompOp returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='greater'
			{
				$current = grammarAccess.getCompOpAccess().getGreaterEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCompOpAccess().getGreaterEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='greater_equal'
			{
				$current = grammarAccess.getCompOpAccess().getGreater_equalEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCompOpAccess().getGreater_equalEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='less'
			{
				$current = grammarAccess.getCompOpAccess().getLessEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getCompOpAccess().getLessEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='less_equal'
			{
				$current = grammarAccess.getCompOpAccess().getLess_equalEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getCompOpAccess().getLess_equalEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='equal'
			{
				$current = grammarAccess.getCompOpAccess().getEqualEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getCompOpAccess().getEqualEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='not_equal'
			{
				$current = grammarAccess.getCompOpAccess().getNot_equalEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getCompOpAccess().getNot_equalEnumLiteralDeclaration_5());
			}
		)
	)
;

// Rule MathOp
ruleMathOp returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='plus'
			{
				$current = grammarAccess.getMathOpAccess().getPlusEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMathOpAccess().getPlusEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='minus'
			{
				$current = grammarAccess.getMathOpAccess().getMinusEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMathOpAccess().getMinusEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='divided'
			{
				$current = grammarAccess.getMathOpAccess().getDividedEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getMathOpAccess().getDividedEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='multiplication'
			{
				$current = grammarAccess.getMathOpAccess().getMultiplicationEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getMathOpAccess().getMultiplicationEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule BoolAttr
ruleBoolAttr returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='SNRValues_ASC'
			{
				$current = grammarAccess.getBoolAttrAccess().getSNRValues_ASCEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getBoolAttrAccess().getSNRValues_ASCEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='SNRValues_DESC'
			{
				$current = grammarAccess.getBoolAttrAccess().getSNRValues_DESCEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getBoolAttrAccess().getSNRValues_DESCEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule StringAttr
ruleStringAttr returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='OpRole'
		{
			$current = grammarAccess.getStringAttrAccess().getOpRoleEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getStringAttrAccess().getOpRoleEnumLiteralDeclaration());
		}
	)
;

// Rule NumAttr
ruleNumAttr returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='SecLevel'
			{
				$current = grammarAccess.getNumAttrAccess().getSecLevelEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getNumAttrAccess().getSecLevelEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='CarrierFreq'
			{
				$current = grammarAccess.getNumAttrAccess().getCarrierFreqEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getNumAttrAccess().getCarrierFreqEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule RadioModes
ruleRadioModes returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='SILENT_MODE'
			{
				$current = grammarAccess.getRadioModesAccess().getSILENT_MODEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getRadioModesAccess().getSILENT_MODEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='ALERT_MODE'
			{
				$current = grammarAccess.getRadioModesAccess().getALERT_MODEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getRadioModesAccess().getALERT_MODEEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='FULLDUPLEX_MODE'
			{
				$current = grammarAccess.getRadioModesAccess().getFULLDUPLEX_MODEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getRadioModesAccess().getFULLDUPLEX_MODEEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='NORMAL_MODE'
			{
				$current = grammarAccess.getRadioModesAccess().getNORMAL_MODEEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getRadioModesAccess().getNORMAL_MODEEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='MAINTAIN_CURRENT_MODE'
			{
				$current = grammarAccess.getRadioModesAccess().getMAINTAIN_CURRENT_MODEEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getRadioModesAccess().getMAINTAIN_CURRENT_MODEEnumLiteralDeclaration_4());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
