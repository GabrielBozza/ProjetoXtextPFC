/*
 * generated by Xtext 2.24.0
 */
package ime.xtext.radioDsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class RuleSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.RuleSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRuleSetAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRuleSetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cRuleAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cRuleRuleParserRuleCall_3_0_0 = (RuleCall)cRuleAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cRuleAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cRuleRuleParserRuleCall_3_1_1_0 = (RuleCall)cRuleAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RuleSet:
		//	{RuleSet}
		//	'RuleSet'
		//	'{' (rule+=Rule ("," rule+=Rule)*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{RuleSet}
		//'RuleSet'
		//'{' (rule+=Rule ("," rule+=Rule)*)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{RuleSet}
		public Action getRuleSetAction_0() { return cRuleSetAction_0; }
		
		//'RuleSet'
		public Keyword getRuleSetKeyword_1() { return cRuleSetKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(rule+=Rule ("," rule+=Rule)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//rule+=Rule
		public Assignment getRuleAssignment_3_0() { return cRuleAssignment_3_0; }
		
		//Rule
		public RuleCall getRuleRuleParserRuleCall_3_0_0() { return cRuleRuleParserRuleCall_3_0_0; }
		
		//("," rule+=Rule)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//rule+=Rule
		public Assignment getRuleAssignment_3_1_1() { return cRuleAssignment_3_1_1; }
		
		//Rule
		public RuleCall getRuleRuleParserRuleCall_3_1_1_0() { return cRuleRuleParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class LeftSideElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.LeftSide");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleExpParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompoundExpParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LeftSide:
		//	SimpleExp | CompoundExp;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleExp | CompoundExp
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleExp
		public RuleCall getSimpleExpParserRuleCall_0() { return cSimpleExpParserRuleCall_0; }
		
		//CompoundExp
		public RuleCall getCompoundExpParserRuleCall_1() { return cCompoundExpParserRuleCall_1; }
	}
	public class RightSideElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.RightSide");
		private final RuleCall cActionRadioParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//RightSide:
		//	ActionRadio;
		@Override public ParserRule getRule() { return rule; }
		
		//ActionRadio
		public RuleCall getActionRadioParserRuleCall() { return cActionRadioParserRuleCall; }
	}
	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLogicParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComparatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMathParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Operator:
		//	Logic | Comparator | Math;
		@Override public ParserRule getRule() { return rule; }
		
		//Logic | Comparator | Math
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Logic
		public RuleCall getLogicParserRuleCall_0() { return cLogicParserRuleCall_0; }
		
		//Comparator
		public RuleCall getComparatorParserRuleCall_1() { return cComparatorParserRuleCall_1; }
		
		//Math
		public RuleCall getMathParserRuleCall_2() { return cMathParserRuleCall_2; }
	}
	public class OperatorNumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.OperatorNum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComparatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMathParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OperatorNum Operator:
		//	Comparator | Math;
		@Override public ParserRule getRule() { return rule; }
		
		//Comparator | Math
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Comparator
		public RuleCall getComparatorParserRuleCall_0() { return cComparatorParserRuleCall_0; }
		
		//Math
		public RuleCall getMathParserRuleCall_1() { return cMathParserRuleCall_1; }
	}
	public class OperatorStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.OperatorString");
		private final RuleCall cComparatorStringParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//OperatorString Operator:
		//	ComparatorString;
		@Override public ParserRule getRule() { return rule; }
		
		//ComparatorString
		public RuleCall getComparatorStringParserRuleCall() { return cComparatorStringParserRuleCall; }
	}
	public class OperatorBoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.OperatorBool");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLogicMiddleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComparatorBoolParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OperatorBool Operator:
		//	LogicMiddle | ComparatorBool;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicMiddle | ComparatorBool
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LogicMiddle
		public RuleCall getLogicMiddleParserRuleCall_0() { return cLogicMiddleParserRuleCall_0; }
		
		//ComparatorBool
		public RuleCall getComparatorBoolParserRuleCall_1() { return cComparatorBoolParserRuleCall_1; }
	}
	public class OperatorBoolBeforeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.OperatorBoolBefore");
		private final RuleCall cLogicBeforeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//OperatorBoolBefore Operator:
		//	LogicBefore;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicBefore
		public RuleCall getLogicBeforeParserRuleCall() { return cLogicBeforeParserRuleCall; }
	}
	public class OperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.Operand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBoolParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBoolAttributesParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStringAttributesParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cNumAttributesParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Operand:
		//	Num | Strings | Bool | BoolAttributes | StringAttributes | NumAttributes;
		@Override public ParserRule getRule() { return rule; }
		
		//Num | Strings | Bool | BoolAttributes | StringAttributes | NumAttributes
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Num
		public RuleCall getNumParserRuleCall_0() { return cNumParserRuleCall_0; }
		
		//Strings
		public RuleCall getStringsParserRuleCall_1() { return cStringsParserRuleCall_1; }
		
		//Bool
		public RuleCall getBoolParserRuleCall_2() { return cBoolParserRuleCall_2; }
		
		//BoolAttributes
		public RuleCall getBoolAttributesParserRuleCall_3() { return cBoolAttributesParserRuleCall_3; }
		
		//StringAttributes
		public RuleCall getStringAttributesParserRuleCall_4() { return cStringAttributesParserRuleCall_4; }
		
		//NumAttributes
		public RuleCall getNumAttributesParserRuleCall_5() { return cNumAttributesParserRuleCall_5; }
	}
	public class OperandNumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.OperandNum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumAttributesParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OperandNum Operand:
		//	Num | NumAttributes;
		@Override public ParserRule getRule() { return rule; }
		
		//Num | NumAttributes
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Num
		public RuleCall getNumParserRuleCall_0() { return cNumParserRuleCall_0; }
		
		//NumAttributes
		public RuleCall getNumAttributesParserRuleCall_1() { return cNumAttributesParserRuleCall_1; }
	}
	public class OperandBoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.OperandBool");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBoolParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBoolAttributesParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OperandBool Operand:
		//	Bool | BoolAttributes;
		@Override public ParserRule getRule() { return rule; }
		
		//Bool | BoolAttributes
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Bool
		public RuleCall getBoolParserRuleCall_0() { return cBoolParserRuleCall_0; }
		
		//BoolAttributes
		public RuleCall getBoolAttributesParserRuleCall_1() { return cBoolAttributesParserRuleCall_1; }
	}
	public class OperandStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.OperandString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringAttributesParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OperandString Operand:
		//	Strings | StringAttributes;
		@Override public ParserRule getRule() { return rule; }
		
		//Strings | StringAttributes
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Strings
		public RuleCall getStringsParserRuleCall_0() { return cStringsParserRuleCall_0; }
		
		//StringAttributes
		public RuleCall getStringAttributesParserRuleCall_1() { return cStringAttributesParserRuleCall_1; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleExpParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompoundExpParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Expression:
		//	SimpleExp | CompoundExp;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleExp | CompoundExp
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleExp
		public RuleCall getSimpleExpParserRuleCall_0() { return cSimpleExpParserRuleCall_0; }
		
		//CompoundExp
		public RuleCall getCompoundExpParserRuleCall_1() { return cCompoundExpParserRuleCall_1; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cPriorityKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPriorityAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPriorityEIntParserRuleCall_5_0 = (RuleCall)cPriorityAssignment_5.eContents().get(0);
		private final Keyword cRuleKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cLeftsideAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cLeftsideLeftSideParserRuleCall_8_0 = (RuleCall)cLeftsideAssignment_8.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cRightsideAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cRightsideRightSideParserRuleCall_10_0 = (RuleCall)cRightsideAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Rule:
		//	'Rule'
		//	name=EString
		//	'{'
		//	'priority'+ '='+ priority=EInt
		//	'rule'+ '='+ leftside=LeftSide
		//	'-->' rightside=RightSide
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Rule'
		//name=EString
		//'{'
		//'priority'+ '='+ priority=EInt
		//'rule'+ '='+ leftside=LeftSide
		//'-->' rightside=RightSide
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Rule'
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'priority'+
		public Keyword getPriorityKeyword_3() { return cPriorityKeyword_3; }
		
		//'='+
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//priority=EInt
		public Assignment getPriorityAssignment_5() { return cPriorityAssignment_5; }
		
		//EInt
		public RuleCall getPriorityEIntParserRuleCall_5_0() { return cPriorityEIntParserRuleCall_5_0; }
		
		//'rule'+
		public Keyword getRuleKeyword_6() { return cRuleKeyword_6; }
		
		//'='+
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//leftside=LeftSide
		public Assignment getLeftsideAssignment_8() { return cLeftsideAssignment_8; }
		
		//LeftSide
		public RuleCall getLeftsideLeftSideParserRuleCall_8_0() { return cLeftsideLeftSideParserRuleCall_8_0; }
		
		//'-->'
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_9() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_9; }
		
		//rightside=RightSide
		public Assignment getRightsideAssignment_10() { return cRightsideAssignment_10; }
		
		//RightSide
		public RuleCall getRightsideRightSideParserRuleCall_10_0() { return cRightsideRightSideParserRuleCall_10_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class SimpleExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.SimpleExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cPrecedingLogicOpAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cPrecedingLogicOpLogicOpEnumRuleCall_0_0_0 = (RuleCall)cPrecedingLogicOpAssignment_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Assignment cOperandAssignment_0_2_0 = (Assignment)cGroup_0_2.eContents().get(0);
		private final RuleCall cOperandOperandNumParserRuleCall_0_2_0_0 = (RuleCall)cOperandAssignment_0_2_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cOperatorOperatorNumParserRuleCall_0_2_1_0 = (RuleCall)cOperatorAssignment_0_2_1.eContents().get(0);
		private final Assignment cOperandAssignment_0_2_2 = (Assignment)cGroup_0_2.eContents().get(2);
		private final RuleCall cOperandOperandNumParserRuleCall_0_2_2_0 = (RuleCall)cOperandAssignment_0_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cPrecedingLogicOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPrecedingLogicOpLogicOpEnumRuleCall_1_0_0 = (RuleCall)cPrecedingLogicOpAssignment_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Assignment cOperandAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cOperandOperandStringParserRuleCall_1_2_0_0 = (RuleCall)cOperandAssignment_1_2_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cOperatorOperatorStringParserRuleCall_1_2_1_0 = (RuleCall)cOperatorAssignment_1_2_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cOperandOperandStringParserRuleCall_1_2_2_0 = (RuleCall)cOperandAssignment_1_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cPrecedingLogicOpAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cPrecedingLogicOpLogicOpEnumRuleCall_2_0_0 = (RuleCall)cPrecedingLogicOpAssignment_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Assignment cOperandAssignment_2_2_0 = (Assignment)cGroup_2_2.eContents().get(0);
		private final RuleCall cOperandOperandBoolParserRuleCall_2_2_0_0 = (RuleCall)cOperandAssignment_2_2_0.eContents().get(0);
		private final Assignment cOperatorAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cOperatorOperatorStringParserRuleCall_2_2_1_0 = (RuleCall)cOperatorAssignment_2_2_1.eContents().get(0);
		private final Assignment cOperandAssignment_2_2_2 = (Assignment)cGroup_2_2.eContents().get(2);
		private final RuleCall cOperandOperandBoolParserRuleCall_2_2_2_0 = (RuleCall)cOperandAssignment_2_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cPrecedingLogicOpAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cPrecedingLogicOpLogicOpEnumRuleCall_3_0_0 = (RuleCall)cPrecedingLogicOpAssignment_3_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Assignment cOperatorAssignment_3_2_0 = (Assignment)cGroup_3_2.eContents().get(0);
		private final RuleCall cOperatorOperatorBoolBeforeParserRuleCall_3_2_0_0 = (RuleCall)cOperatorAssignment_3_2_0.eContents().get(0);
		private final Assignment cOperandAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cOperandOperandBoolParserRuleCall_3_2_1_0 = (RuleCall)cOperandAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//SimpleExp:
		//	PrecedingLogicOp=LogicOp
		//	'(' (operand+=OperandNum operator=OperatorNum operand+=OperandNum) ')' | PrecedingLogicOp=LogicOp
		//	'(' (operand+=OperandString operator=OperatorString operand+=OperandString) ')' | PrecedingLogicOp=LogicOp
		//	'(' (operand+=OperandBool operator=OperatorString operand+=OperandBool) ')' | PrecedingLogicOp=LogicOp
		//	'(' (operator=OperatorBoolBefore operand+=OperandBool) ')';
		@Override public ParserRule getRule() { return rule; }
		
		//PrecedingLogicOp=LogicOp
		//'(' (operand+=OperandNum operator=OperatorNum operand+=OperandNum) ')' | PrecedingLogicOp=LogicOp
		//'(' (operand+=OperandString operator=OperatorString operand+=OperandString) ')' | PrecedingLogicOp=LogicOp
		//'(' (operand+=OperandBool operator=OperatorString operand+=OperandBool) ')' | PrecedingLogicOp=LogicOp
		//'(' (operator=OperatorBoolBefore operand+=OperandBool) ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrecedingLogicOp=LogicOp
		//'(' (operand+=OperandNum operator=OperatorNum operand+=OperandNum) ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//PrecedingLogicOp=LogicOp
		public Assignment getPrecedingLogicOpAssignment_0_0() { return cPrecedingLogicOpAssignment_0_0; }
		
		//LogicOp
		public RuleCall getPrecedingLogicOpLogicOpEnumRuleCall_0_0_0() { return cPrecedingLogicOpLogicOpEnumRuleCall_0_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//(operand+=OperandNum operator=OperatorNum operand+=OperandNum)
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//operand+=OperandNum
		public Assignment getOperandAssignment_0_2_0() { return cOperandAssignment_0_2_0; }
		
		//OperandNum
		public RuleCall getOperandOperandNumParserRuleCall_0_2_0_0() { return cOperandOperandNumParserRuleCall_0_2_0_0; }
		
		//operator=OperatorNum
		public Assignment getOperatorAssignment_0_2_1() { return cOperatorAssignment_0_2_1; }
		
		//OperatorNum
		public RuleCall getOperatorOperatorNumParserRuleCall_0_2_1_0() { return cOperatorOperatorNumParserRuleCall_0_2_1_0; }
		
		//operand+=OperandNum
		public Assignment getOperandAssignment_0_2_2() { return cOperandAssignment_0_2_2; }
		
		//OperandNum
		public RuleCall getOperandOperandNumParserRuleCall_0_2_2_0() { return cOperandOperandNumParserRuleCall_0_2_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//PrecedingLogicOp=LogicOp
		//'(' (operand+=OperandString operator=OperatorString operand+=OperandString) ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//PrecedingLogicOp=LogicOp
		public Assignment getPrecedingLogicOpAssignment_1_0() { return cPrecedingLogicOpAssignment_1_0; }
		
		//LogicOp
		public RuleCall getPrecedingLogicOpLogicOpEnumRuleCall_1_0_0() { return cPrecedingLogicOpLogicOpEnumRuleCall_1_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//(operand+=OperandString operator=OperatorString operand+=OperandString)
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//operand+=OperandString
		public Assignment getOperandAssignment_1_2_0() { return cOperandAssignment_1_2_0; }
		
		//OperandString
		public RuleCall getOperandOperandStringParserRuleCall_1_2_0_0() { return cOperandOperandStringParserRuleCall_1_2_0_0; }
		
		//operator=OperatorString
		public Assignment getOperatorAssignment_1_2_1() { return cOperatorAssignment_1_2_1; }
		
		//OperatorString
		public RuleCall getOperatorOperatorStringParserRuleCall_1_2_1_0() { return cOperatorOperatorStringParserRuleCall_1_2_1_0; }
		
		//operand+=OperandString
		public Assignment getOperandAssignment_1_2_2() { return cOperandAssignment_1_2_2; }
		
		//OperandString
		public RuleCall getOperandOperandStringParserRuleCall_1_2_2_0() { return cOperandOperandStringParserRuleCall_1_2_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//PrecedingLogicOp=LogicOp
		//'(' (operand+=OperandBool operator=OperatorString operand+=OperandBool) ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//PrecedingLogicOp=LogicOp
		public Assignment getPrecedingLogicOpAssignment_2_0() { return cPrecedingLogicOpAssignment_2_0; }
		
		//LogicOp
		public RuleCall getPrecedingLogicOpLogicOpEnumRuleCall_2_0_0() { return cPrecedingLogicOpLogicOpEnumRuleCall_2_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//(operand+=OperandBool operator=OperatorString operand+=OperandBool)
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//operand+=OperandBool
		public Assignment getOperandAssignment_2_2_0() { return cOperandAssignment_2_2_0; }
		
		//OperandBool
		public RuleCall getOperandOperandBoolParserRuleCall_2_2_0_0() { return cOperandOperandBoolParserRuleCall_2_2_0_0; }
		
		//operator=OperatorString
		public Assignment getOperatorAssignment_2_2_1() { return cOperatorAssignment_2_2_1; }
		
		//OperatorString
		public RuleCall getOperatorOperatorStringParserRuleCall_2_2_1_0() { return cOperatorOperatorStringParserRuleCall_2_2_1_0; }
		
		//operand+=OperandBool
		public Assignment getOperandAssignment_2_2_2() { return cOperandAssignment_2_2_2; }
		
		//OperandBool
		public RuleCall getOperandOperandBoolParserRuleCall_2_2_2_0() { return cOperandOperandBoolParserRuleCall_2_2_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//PrecedingLogicOp=LogicOp
		//'(' (operator=OperatorBoolBefore operand+=OperandBool) ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//PrecedingLogicOp=LogicOp
		public Assignment getPrecedingLogicOpAssignment_3_0() { return cPrecedingLogicOpAssignment_3_0; }
		
		//LogicOp
		public RuleCall getPrecedingLogicOpLogicOpEnumRuleCall_3_0_0() { return cPrecedingLogicOpLogicOpEnumRuleCall_3_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//(operator=OperatorBoolBefore operand+=OperandBool)
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//operator=OperatorBoolBefore
		public Assignment getOperatorAssignment_3_2_0() { return cOperatorAssignment_3_2_0; }
		
		//OperatorBoolBefore
		public RuleCall getOperatorOperatorBoolBeforeParserRuleCall_3_2_0_0() { return cOperatorOperatorBoolBeforeParserRuleCall_3_2_0_0; }
		
		//operand+=OperandBool
		public Assignment getOperandAssignment_3_2_1() { return cOperandAssignment_3_2_1; }
		
		//OperandBool
		public RuleCall getOperandOperandBoolParserRuleCall_3_2_1_0() { return cOperandOperandBoolParserRuleCall_3_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
	}
	public class CompoundExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.CompoundExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrecedingLogicOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPrecedingLogicOpLogicOpEnumRuleCall_0_0 = (RuleCall)cPrecedingLogicOpAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CompoundExp:
		//	PrecedingLogicOp=LogicOp
		//	'['
		//	expression+=Expression expression+=Expression*
		//	']';
		@Override public ParserRule getRule() { return rule; }
		
		//PrecedingLogicOp=LogicOp
		//'['
		//expression+=Expression expression+=Expression*
		//']'
		public Group getGroup() { return cGroup; }
		
		//PrecedingLogicOp=LogicOp
		public Assignment getPrecedingLogicOpAssignment_0() { return cPrecedingLogicOpAssignment_0; }
		
		//LogicOp
		public RuleCall getPrecedingLogicOpLogicOpEnumRuleCall_0_0() { return cPrecedingLogicOpLogicOpEnumRuleCall_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//expression+=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//expression+=Expression*
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class LogicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.Logic");
		private final Assignment cOperationAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOperationLogicOpEnumRuleCall_0 = (RuleCall)cOperationAssignment.eContents().get(0);
		
		//Logic:
		//	Operation=LogicOp;
		@Override public ParserRule getRule() { return rule; }
		
		//Operation=LogicOp
		public Assignment getOperationAssignment() { return cOperationAssignment; }
		
		//LogicOp
		public RuleCall getOperationLogicOpEnumRuleCall_0() { return cOperationLogicOpEnumRuleCall_0; }
	}
	public class LogicMiddleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.LogicMiddle");
		private final Assignment cOperationAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOperationLogicOpMiddleEnumRuleCall_0 = (RuleCall)cOperationAssignment.eContents().get(0);
		
		//LogicMiddle Logic:
		//	Operation=LogicOpMiddle;
		@Override public ParserRule getRule() { return rule; }
		
		//Operation=LogicOpMiddle
		public Assignment getOperationAssignment() { return cOperationAssignment; }
		
		//LogicOpMiddle
		public RuleCall getOperationLogicOpMiddleEnumRuleCall_0() { return cOperationLogicOpMiddleEnumRuleCall_0; }
	}
	public class LogicBeforeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.LogicBefore");
		private final Assignment cOperationAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOperationLogicOpBeforeEnumRuleCall_0 = (RuleCall)cOperationAssignment.eContents().get(0);
		
		//LogicBefore Logic:
		//	Operation=LogicOpBefore;
		@Override public ParserRule getRule() { return rule; }
		
		//Operation=LogicOpBefore
		public Assignment getOperationAssignment() { return cOperationAssignment; }
		
		//LogicOpBefore
		public RuleCall getOperationLogicOpBeforeEnumRuleCall_0() { return cOperationLogicOpBeforeEnumRuleCall_0; }
	}
	public class ComparatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.Comparator");
		private final Assignment cOperationAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOperationCompOpEnumRuleCall_0 = (RuleCall)cOperationAssignment.eContents().get(0);
		
		//Comparator:
		//	Operation=CompOp;
		@Override public ParserRule getRule() { return rule; }
		
		//Operation=CompOp
		public Assignment getOperationAssignment() { return cOperationAssignment; }
		
		//CompOp
		public RuleCall getOperationCompOpEnumRuleCall_0() { return cOperationCompOpEnumRuleCall_0; }
	}
	public class ComparatorStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.ComparatorString");
		private final Assignment cOperationAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOperationCompOpStringEnumRuleCall_0 = (RuleCall)cOperationAssignment.eContents().get(0);
		
		//ComparatorString Comparator:
		//	Operation=CompOpString;
		@Override public ParserRule getRule() { return rule; }
		
		//Operation=CompOpString
		public Assignment getOperationAssignment() { return cOperationAssignment; }
		
		//CompOpString
		public RuleCall getOperationCompOpStringEnumRuleCall_0() { return cOperationCompOpStringEnumRuleCall_0; }
	}
	public class ComparatorBoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.ComparatorBool");
		private final Assignment cOperationAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOperationCompOpBoolEnumRuleCall_0 = (RuleCall)cOperationAssignment.eContents().get(0);
		
		//ComparatorBool Comparator:
		//	Operation=CompOpBool;
		@Override public ParserRule getRule() { return rule; }
		
		//Operation=CompOpBool
		public Assignment getOperationAssignment() { return cOperationAssignment; }
		
		//CompOpBool
		public RuleCall getOperationCompOpBoolEnumRuleCall_0() { return cOperationCompOpBoolEnumRuleCall_0; }
	}
	public class MathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.Math");
		private final Assignment cOperationAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOperationMathOpEnumRuleCall_0 = (RuleCall)cOperationAssignment.eContents().get(0);
		
		//Math:
		//	Operation=MathOp;
		@Override public ParserRule getRule() { return rule; }
		
		//Operation=MathOp
		public Assignment getOperationAssignment() { return cOperationAssignment; }
		
		//MathOp
		public RuleCall getOperationMathOpEnumRuleCall_0() { return cOperationMathOpEnumRuleCall_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.EInt");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EInt ecore::EInt:
		//	INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class NumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.Num");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEDoubleParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Num:
		//	value=EDouble;
		@Override public ParserRule getRule() { return rule; }
		
		//value=EDouble
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//EDouble
		public RuleCall getValueEDoubleParserRuleCall_0() { return cValueEDoubleParserRuleCall_0; }
	}
	public class StringsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.Strings");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEStringParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Strings:
		//	value=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//value=EString
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//EString
		public RuleCall getValueEStringParserRuleCall_0() { return cValueEStringParserRuleCall_0; }
	}
	public class BoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.Bool");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEBooleanParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Bool:
		//	value=EBoolean;
		@Override public ParserRule getRule() { return rule; }
		
		//value=EBoolean
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//EBoolean
		public RuleCall getValueEBooleanParserRuleCall_0() { return cValueEBooleanParserRuleCall_0; }
	}
	public class BoolAttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.BoolAttributes");
		private final Assignment cBoolAttrAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBoolAttrBoolAttrEnumRuleCall_0 = (RuleCall)cBoolAttrAssignment.eContents().get(0);
		
		//BoolAttributes:
		//	boolAttr=BoolAttr;
		@Override public ParserRule getRule() { return rule; }
		
		//boolAttr=BoolAttr
		public Assignment getBoolAttrAssignment() { return cBoolAttrAssignment; }
		
		//BoolAttr
		public RuleCall getBoolAttrBoolAttrEnumRuleCall_0() { return cBoolAttrBoolAttrEnumRuleCall_0; }
	}
	public class StringAttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.StringAttributes");
		private final Assignment cStringAttrAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStringAttrStringAttrEnumRuleCall_0 = (RuleCall)cStringAttrAssignment.eContents().get(0);
		
		//StringAttributes:
		//	stringAttr=StringAttr;
		@Override public ParserRule getRule() { return rule; }
		
		//stringAttr=StringAttr
		public Assignment getStringAttrAssignment() { return cStringAttrAssignment; }
		
		//StringAttr
		public RuleCall getStringAttrStringAttrEnumRuleCall_0() { return cStringAttrStringAttrEnumRuleCall_0; }
	}
	public class NumAttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.NumAttributes");
		private final Assignment cNumAttrAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNumAttrNumAttrEnumRuleCall_0 = (RuleCall)cNumAttrAssignment.eContents().get(0);
		
		//NumAttributes:
		//	numAttr=NumAttr;
		@Override public ParserRule getRule() { return rule; }
		
		//numAttr=NumAttr
		public Assignment getNumAttrAssignment() { return cNumAttrAssignment; }
		
		//NumAttr
		public RuleCall getNumAttrNumAttrEnumRuleCall_0() { return cNumAttrNumAttrEnumRuleCall_0; }
	}
	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.EDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//EDouble ecore::EDouble:
		//	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT? '.' INT (('E' | 'e') '-'? INT)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
		
		//(('E' | 'e') '-'? INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//('E' | 'e')
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//'E'
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }
		
		//'e'
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean ecore::EBoolean:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class ActionRadioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.ActionRadio");
		private final Assignment cNewStateAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNewStateRadioModesEnumRuleCall_0 = (RuleCall)cNewStateAssignment.eContents().get(0);
		
		//ActionRadio:
		//	newState=RadioModes;
		@Override public ParserRule getRule() { return rule; }
		
		//newState=RadioModes
		public Assignment getNewStateAssignment() { return cNewStateAssignment; }
		
		//RadioModes
		public RuleCall getNewStateRadioModesEnumRuleCall_0() { return cNewStateRadioModesEnumRuleCall_0; }
	}
	
	public class LogicOpElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.LogicOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNoneEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNone_Keyword_0_0 = (Keyword)cNoneEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAndEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAndAndKeyword_1_0 = (Keyword)cAndEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cOrEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cOrOrKeyword_2_0 = (Keyword)cOrEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNotEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNotNotKeyword_3_0 = (Keyword)cNotEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum LogicOp:
		//	None='_' | and | or | not;
		public EnumRule getRule() { return rule; }
		
		//None='_' | and | or | not
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//None='_'
		public EnumLiteralDeclaration getNoneEnumLiteralDeclaration_0() { return cNoneEnumLiteralDeclaration_0; }
		
		//'_'
		public Keyword getNone_Keyword_0_0() { return cNone_Keyword_0_0; }
		
		//and
		public EnumLiteralDeclaration getAndEnumLiteralDeclaration_1() { return cAndEnumLiteralDeclaration_1; }
		
		//'and'
		public Keyword getAndAndKeyword_1_0() { return cAndAndKeyword_1_0; }
		
		//or
		public EnumLiteralDeclaration getOrEnumLiteralDeclaration_2() { return cOrEnumLiteralDeclaration_2; }
		
		//'or'
		public Keyword getOrOrKeyword_2_0() { return cOrOrKeyword_2_0; }
		
		//not
		public EnumLiteralDeclaration getNotEnumLiteralDeclaration_3() { return cNotEnumLiteralDeclaration_3; }
		
		//'not'
		public Keyword getNotNotKeyword_3_0() { return cNotNotKeyword_3_0; }
	}
	public class LogicOpMiddleElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.LogicOpMiddle");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAndEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAndAndKeyword_0_0 = (Keyword)cAndEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOrEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOrOrKeyword_1_0 = (Keyword)cOrEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum LogicOpMiddle returns LogicOp:
		//	and | or;
		public EnumRule getRule() { return rule; }
		
		//and | or
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//and
		public EnumLiteralDeclaration getAndEnumLiteralDeclaration_0() { return cAndEnumLiteralDeclaration_0; }
		
		//'and'
		public Keyword getAndAndKeyword_0_0() { return cAndAndKeyword_0_0; }
		
		//or
		public EnumLiteralDeclaration getOrEnumLiteralDeclaration_1() { return cOrEnumLiteralDeclaration_1; }
		
		//'or'
		public Keyword getOrOrKeyword_1_0() { return cOrOrKeyword_1_0; }
	}
	public class LogicOpBeforeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.LogicOpBefore");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNoneEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNone_Keyword_0_0 = (Keyword)cNoneEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNotEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNotNotKeyword_1_0 = (Keyword)cNotEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum LogicOpBefore returns LogicOp:
		//	None='_' | not;
		public EnumRule getRule() { return rule; }
		
		//None='_' | not
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//None='_'
		public EnumLiteralDeclaration getNoneEnumLiteralDeclaration_0() { return cNoneEnumLiteralDeclaration_0; }
		
		//'_'
		public Keyword getNone_Keyword_0_0() { return cNone_Keyword_0_0; }
		
		//not
		public EnumLiteralDeclaration getNotEnumLiteralDeclaration_1() { return cNotEnumLiteralDeclaration_1; }
		
		//'not'
		public Keyword getNotNotKeyword_1_0() { return cNotNotKeyword_1_0; }
	}
	public class CompOpElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.CompOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGreaterEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGreaterGreaterThanSignKeyword_0_0 = (Keyword)cGreaterEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGreater_equalEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGreater_equalGreaterThanSignEqualsSignKeyword_1_0 = (Keyword)cGreater_equalEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLessEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLessLessThanSignKeyword_2_0 = (Keyword)cLessEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLess_equalEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLess_equalLessThanSignEqualsSignKeyword_3_0 = (Keyword)cLess_equalEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cEqualEqualsSignKeyword_4_0 = (Keyword)cEqualEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cNot_equalEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cNot_equalExclamationMarkEqualsSignKeyword_5_0 = (Keyword)cNot_equalEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum CompOp:
		//	greater='>' | greater_equal='>=' | less='<' | less_equal='<=' | equal='=' | not_equal='!=';
		public EnumRule getRule() { return rule; }
		
		//greater='>' | greater_equal='>=' | less='<' | less_equal='<=' | equal='=' | not_equal='!='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//greater='>'
		public EnumLiteralDeclaration getGreaterEnumLiteralDeclaration_0() { return cGreaterEnumLiteralDeclaration_0; }
		
		//'>'
		public Keyword getGreaterGreaterThanSignKeyword_0_0() { return cGreaterGreaterThanSignKeyword_0_0; }
		
		//greater_equal='>='
		public EnumLiteralDeclaration getGreater_equalEnumLiteralDeclaration_1() { return cGreater_equalEnumLiteralDeclaration_1; }
		
		//'>='
		public Keyword getGreater_equalGreaterThanSignEqualsSignKeyword_1_0() { return cGreater_equalGreaterThanSignEqualsSignKeyword_1_0; }
		
		//less='<'
		public EnumLiteralDeclaration getLessEnumLiteralDeclaration_2() { return cLessEnumLiteralDeclaration_2; }
		
		//'<'
		public Keyword getLessLessThanSignKeyword_2_0() { return cLessLessThanSignKeyword_2_0; }
		
		//less_equal='<='
		public EnumLiteralDeclaration getLess_equalEnumLiteralDeclaration_3() { return cLess_equalEnumLiteralDeclaration_3; }
		
		//'<='
		public Keyword getLess_equalLessThanSignEqualsSignKeyword_3_0() { return cLess_equalLessThanSignEqualsSignKeyword_3_0; }
		
		//equal='='
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_4() { return cEqualEnumLiteralDeclaration_4; }
		
		//'='
		public Keyword getEqualEqualsSignKeyword_4_0() { return cEqualEqualsSignKeyword_4_0; }
		
		//not_equal='!='
		public EnumLiteralDeclaration getNot_equalEnumLiteralDeclaration_5() { return cNot_equalEnumLiteralDeclaration_5; }
		
		//'!='
		public Keyword getNot_equalExclamationMarkEqualsSignKeyword_5_0() { return cNot_equalExclamationMarkEqualsSignKeyword_5_0; }
	}
	public class CompOpStringElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.CompOpString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEqualEqualsSignKeyword_0_0 = (Keyword)cEqualEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNot_equalEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNot_equalExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cNot_equalEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum CompOpString returns CompOp:
		//	equal='=' | not_equal='!=';
		public EnumRule getRule() { return rule; }
		
		//equal='=' | not_equal='!='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//equal='='
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_0() { return cEqualEnumLiteralDeclaration_0; }
		
		//'='
		public Keyword getEqualEqualsSignKeyword_0_0() { return cEqualEqualsSignKeyword_0_0; }
		
		//not_equal='!='
		public EnumLiteralDeclaration getNot_equalEnumLiteralDeclaration_1() { return cNot_equalEnumLiteralDeclaration_1; }
		
		//'!='
		public Keyword getNot_equalExclamationMarkEqualsSignKeyword_1_0() { return cNot_equalExclamationMarkEqualsSignKeyword_1_0; }
	}
	public class CompOpBoolElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.CompOpBool");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEqualEqualsSignKeyword_0_0 = (Keyword)cEqualEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNot_equalEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNot_equalExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cNot_equalEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum CompOpBool returns CompOp:
		//	equal='=' | not_equal='!=';
		public EnumRule getRule() { return rule; }
		
		//equal='=' | not_equal='!='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//equal='='
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_0() { return cEqualEnumLiteralDeclaration_0; }
		
		//'='
		public Keyword getEqualEqualsSignKeyword_0_0() { return cEqualEqualsSignKeyword_0_0; }
		
		//not_equal='!='
		public EnumLiteralDeclaration getNot_equalEnumLiteralDeclaration_1() { return cNot_equalEnumLiteralDeclaration_1; }
		
		//'!='
		public Keyword getNot_equalExclamationMarkEqualsSignKeyword_1_0() { return cNot_equalExclamationMarkEqualsSignKeyword_1_0; }
	}
	public class MathOpElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.MathOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPlusEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPlusPlusSignKeyword_0_0 = (Keyword)cPlusEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMinusEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMinusHyphenMinusKeyword_1_0 = (Keyword)cMinusEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDividedEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDividedSolidusKeyword_2_0 = (Keyword)cDividedEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMultiplicationEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMultiplicationAsteriskKeyword_3_0 = (Keyword)cMultiplicationEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum MathOp:
		//	plus='+' | minus='-' | divided='/' | multiplication='*';
		public EnumRule getRule() { return rule; }
		
		//plus='+' | minus='-' | divided='/' | multiplication='*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//plus='+'
		public EnumLiteralDeclaration getPlusEnumLiteralDeclaration_0() { return cPlusEnumLiteralDeclaration_0; }
		
		//'+'
		public Keyword getPlusPlusSignKeyword_0_0() { return cPlusPlusSignKeyword_0_0; }
		
		//minus='-'
		public EnumLiteralDeclaration getMinusEnumLiteralDeclaration_1() { return cMinusEnumLiteralDeclaration_1; }
		
		//'-'
		public Keyword getMinusHyphenMinusKeyword_1_0() { return cMinusHyphenMinusKeyword_1_0; }
		
		//divided='/'
		public EnumLiteralDeclaration getDividedEnumLiteralDeclaration_2() { return cDividedEnumLiteralDeclaration_2; }
		
		//'/'
		public Keyword getDividedSolidusKeyword_2_0() { return cDividedSolidusKeyword_2_0; }
		
		//multiplication='*'
		public EnumLiteralDeclaration getMultiplicationEnumLiteralDeclaration_3() { return cMultiplicationEnumLiteralDeclaration_3; }
		
		//'*'
		public Keyword getMultiplicationAsteriskKeyword_3_0() { return cMultiplicationAsteriskKeyword_3_0; }
	}
	public class BoolAttrElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.BoolAttr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSNRValues_ASCEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSNRValues_ASCSNRValues_ASCKeyword_0_0 = (Keyword)cSNRValues_ASCEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSNRValues_DESCEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSNRValues_DESCSNRValues_DESCKeyword_1_0 = (Keyword)cSNRValues_DESCEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BoolAttr:
		//	SNRValues_ASC | SNRValues_DESC;
		public EnumRule getRule() { return rule; }
		
		//SNRValues_ASC | SNRValues_DESC
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SNRValues_ASC
		public EnumLiteralDeclaration getSNRValues_ASCEnumLiteralDeclaration_0() { return cSNRValues_ASCEnumLiteralDeclaration_0; }
		
		//'SNRValues_ASC'
		public Keyword getSNRValues_ASCSNRValues_ASCKeyword_0_0() { return cSNRValues_ASCSNRValues_ASCKeyword_0_0; }
		
		//SNRValues_DESC
		public EnumLiteralDeclaration getSNRValues_DESCEnumLiteralDeclaration_1() { return cSNRValues_DESCEnumLiteralDeclaration_1; }
		
		//'SNRValues_DESC'
		public Keyword getSNRValues_DESCSNRValues_DESCKeyword_1_0() { return cSNRValues_DESCSNRValues_DESCKeyword_1_0; }
	}
	public class StringAttrElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.StringAttr");
		private final EnumLiteralDeclaration cOpRoleEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cOpRoleOperationalRoleKeyword_0 = (Keyword)cOpRoleEnumLiteralDeclaration.eContents().get(0);
		
		//enum StringAttr:
		//	OpRole='OperationalRole';
		public EnumRule getRule() { return rule; }
		
		//OpRole='OperationalRole'
		public EnumLiteralDeclaration getOpRoleEnumLiteralDeclaration() { return cOpRoleEnumLiteralDeclaration; }
		
		//'OperationalRole'
		public Keyword getOpRoleOperationalRoleKeyword_0() { return cOpRoleOperationalRoleKeyword_0; }
	}
	public class NumAttrElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.NumAttr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSecLevelEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSecLevelSecurityLevelKeyword_0_0 = (Keyword)cSecLevelEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCarrierFreqEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCarrierFreqCarrierFrequencyKeyword_1_0 = (Keyword)cCarrierFreqEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum NumAttr:
		//	SecLevel='SecurityLevel' | CarrierFreq='CarrierFrequency';
		public EnumRule getRule() { return rule; }
		
		//SecLevel='SecurityLevel' | CarrierFreq='CarrierFrequency'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SecLevel='SecurityLevel'
		public EnumLiteralDeclaration getSecLevelEnumLiteralDeclaration_0() { return cSecLevelEnumLiteralDeclaration_0; }
		
		//'SecurityLevel'
		public Keyword getSecLevelSecurityLevelKeyword_0_0() { return cSecLevelSecurityLevelKeyword_0_0; }
		
		//CarrierFreq='CarrierFrequency'
		public EnumLiteralDeclaration getCarrierFreqEnumLiteralDeclaration_1() { return cCarrierFreqEnumLiteralDeclaration_1; }
		
		//'CarrierFrequency'
		public Keyword getCarrierFreqCarrierFrequencyKeyword_1_0() { return cCarrierFreqCarrierFrequencyKeyword_1_0; }
	}
	public class RadioModesElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ime.xtext.radioDsl.Dsl.RadioModes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSILENT_MODEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSILENT_MODESILENT_MODEKeyword_0_0 = (Keyword)cSILENT_MODEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cALERT_MODEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cALERT_MODEALERT_MODEKeyword_1_0 = (Keyword)cALERT_MODEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFULLDUPLEX_MODEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFULLDUPLEX_MODEFULLDUPLEX_MODEKeyword_2_0 = (Keyword)cFULLDUPLEX_MODEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNORMAL_MODEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNORMAL_MODENORMAL_MODEKeyword_3_0 = (Keyword)cNORMAL_MODEEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cMAINTAIN_CURRENT_MODEEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cMAINTAIN_CURRENT_MODEMAINTAIN_CURRENT_MODEKeyword_4_0 = (Keyword)cMAINTAIN_CURRENT_MODEEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum RadioModes:
		//	SILENT_MODE | ALERT_MODE | FULLDUPLEX_MODE | NORMAL_MODE | MAINTAIN_CURRENT_MODE;
		public EnumRule getRule() { return rule; }
		
		//SILENT_MODE | ALERT_MODE | FULLDUPLEX_MODE | NORMAL_MODE | MAINTAIN_CURRENT_MODE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SILENT_MODE
		public EnumLiteralDeclaration getSILENT_MODEEnumLiteralDeclaration_0() { return cSILENT_MODEEnumLiteralDeclaration_0; }
		
		//'SILENT_MODE'
		public Keyword getSILENT_MODESILENT_MODEKeyword_0_0() { return cSILENT_MODESILENT_MODEKeyword_0_0; }
		
		//ALERT_MODE
		public EnumLiteralDeclaration getALERT_MODEEnumLiteralDeclaration_1() { return cALERT_MODEEnumLiteralDeclaration_1; }
		
		//'ALERT_MODE'
		public Keyword getALERT_MODEALERT_MODEKeyword_1_0() { return cALERT_MODEALERT_MODEKeyword_1_0; }
		
		//FULLDUPLEX_MODE
		public EnumLiteralDeclaration getFULLDUPLEX_MODEEnumLiteralDeclaration_2() { return cFULLDUPLEX_MODEEnumLiteralDeclaration_2; }
		
		//'FULLDUPLEX_MODE'
		public Keyword getFULLDUPLEX_MODEFULLDUPLEX_MODEKeyword_2_0() { return cFULLDUPLEX_MODEFULLDUPLEX_MODEKeyword_2_0; }
		
		//NORMAL_MODE
		public EnumLiteralDeclaration getNORMAL_MODEEnumLiteralDeclaration_3() { return cNORMAL_MODEEnumLiteralDeclaration_3; }
		
		//'NORMAL_MODE'
		public Keyword getNORMAL_MODENORMAL_MODEKeyword_3_0() { return cNORMAL_MODENORMAL_MODEKeyword_3_0; }
		
		//MAINTAIN_CURRENT_MODE
		public EnumLiteralDeclaration getMAINTAIN_CURRENT_MODEEnumLiteralDeclaration_4() { return cMAINTAIN_CURRENT_MODEEnumLiteralDeclaration_4; }
		
		//'MAINTAIN_CURRENT_MODE'
		public Keyword getMAINTAIN_CURRENT_MODEMAINTAIN_CURRENT_MODEKeyword_4_0() { return cMAINTAIN_CURRENT_MODEMAINTAIN_CURRENT_MODEKeyword_4_0; }
	}
	
	private final RuleSetElements pRuleSet;
	private final LeftSideElements pLeftSide;
	private final RightSideElements pRightSide;
	private final OperatorElements pOperator;
	private final OperatorNumElements pOperatorNum;
	private final OperatorStringElements pOperatorString;
	private final OperatorBoolElements pOperatorBool;
	private final OperatorBoolBeforeElements pOperatorBoolBefore;
	private final OperandElements pOperand;
	private final OperandNumElements pOperandNum;
	private final OperandBoolElements pOperandBool;
	private final OperandStringElements pOperandString;
	private final ExpressionElements pExpression;
	private final RuleElements pRule;
	private final SimpleExpElements pSimpleExp;
	private final CompoundExpElements pCompoundExp;
	private final LogicOpElements eLogicOp;
	private final LogicOpMiddleElements eLogicOpMiddle;
	private final LogicOpBeforeElements eLogicOpBefore;
	private final LogicElements pLogic;
	private final LogicMiddleElements pLogicMiddle;
	private final LogicBeforeElements pLogicBefore;
	private final ComparatorElements pComparator;
	private final ComparatorStringElements pComparatorString;
	private final ComparatorBoolElements pComparatorBool;
	private final MathElements pMath;
	private final CompOpElements eCompOp;
	private final CompOpStringElements eCompOpString;
	private final CompOpBoolElements eCompOpBool;
	private final MathOpElements eMathOp;
	private final EStringElements pEString;
	private final EIntElements pEInt;
	private final NumElements pNum;
	private final StringsElements pStrings;
	private final BoolElements pBool;
	private final BoolAttributesElements pBoolAttributes;
	private final StringAttributesElements pStringAttributes;
	private final NumAttributesElements pNumAttributes;
	private final EDoubleElements pEDouble;
	private final EBooleanElements pEBoolean;
	private final BoolAttrElements eBoolAttr;
	private final StringAttrElements eStringAttr;
	private final NumAttrElements eNumAttr;
	private final ActionRadioElements pActionRadio;
	private final RadioModesElements eRadioModes;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRuleSet = new RuleSetElements();
		this.pLeftSide = new LeftSideElements();
		this.pRightSide = new RightSideElements();
		this.pOperator = new OperatorElements();
		this.pOperatorNum = new OperatorNumElements();
		this.pOperatorString = new OperatorStringElements();
		this.pOperatorBool = new OperatorBoolElements();
		this.pOperatorBoolBefore = new OperatorBoolBeforeElements();
		this.pOperand = new OperandElements();
		this.pOperandNum = new OperandNumElements();
		this.pOperandBool = new OperandBoolElements();
		this.pOperandString = new OperandStringElements();
		this.pExpression = new ExpressionElements();
		this.pRule = new RuleElements();
		this.pSimpleExp = new SimpleExpElements();
		this.pCompoundExp = new CompoundExpElements();
		this.eLogicOp = new LogicOpElements();
		this.eLogicOpMiddle = new LogicOpMiddleElements();
		this.eLogicOpBefore = new LogicOpBeforeElements();
		this.pLogic = new LogicElements();
		this.pLogicMiddle = new LogicMiddleElements();
		this.pLogicBefore = new LogicBeforeElements();
		this.pComparator = new ComparatorElements();
		this.pComparatorString = new ComparatorStringElements();
		this.pComparatorBool = new ComparatorBoolElements();
		this.pMath = new MathElements();
		this.eCompOp = new CompOpElements();
		this.eCompOpString = new CompOpStringElements();
		this.eCompOpBool = new CompOpBoolElements();
		this.eMathOp = new MathOpElements();
		this.pEString = new EStringElements();
		this.pEInt = new EIntElements();
		this.pNum = new NumElements();
		this.pStrings = new StringsElements();
		this.pBool = new BoolElements();
		this.pBoolAttributes = new BoolAttributesElements();
		this.pStringAttributes = new StringAttributesElements();
		this.pNumAttributes = new NumAttributesElements();
		this.pEDouble = new EDoubleElements();
		this.pEBoolean = new EBooleanElements();
		this.eBoolAttr = new BoolAttrElements();
		this.eStringAttr = new StringAttrElements();
		this.eNumAttr = new NumAttrElements();
		this.pActionRadio = new ActionRadioElements();
		this.eRadioModes = new RadioModesElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ime.xtext.radioDsl.Dsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//RuleSet:
	//	{RuleSet}
	//	'RuleSet'
	//	'{' (rule+=Rule ("," rule+=Rule)*)?
	//	'}';
	public RuleSetElements getRuleSetAccess() {
		return pRuleSet;
	}
	
	public ParserRule getRuleSetRule() {
		return getRuleSetAccess().getRule();
	}
	
	//LeftSide:
	//	SimpleExp | CompoundExp;
	public LeftSideElements getLeftSideAccess() {
		return pLeftSide;
	}
	
	public ParserRule getLeftSideRule() {
		return getLeftSideAccess().getRule();
	}
	
	//RightSide:
	//	ActionRadio;
	public RightSideElements getRightSideAccess() {
		return pRightSide;
	}
	
	public ParserRule getRightSideRule() {
		return getRightSideAccess().getRule();
	}
	
	//Operator:
	//	Logic | Comparator | Math;
	public OperatorElements getOperatorAccess() {
		return pOperator;
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//OperatorNum Operator:
	//	Comparator | Math;
	public OperatorNumElements getOperatorNumAccess() {
		return pOperatorNum;
	}
	
	public ParserRule getOperatorNumRule() {
		return getOperatorNumAccess().getRule();
	}
	
	//OperatorString Operator:
	//	ComparatorString;
	public OperatorStringElements getOperatorStringAccess() {
		return pOperatorString;
	}
	
	public ParserRule getOperatorStringRule() {
		return getOperatorStringAccess().getRule();
	}
	
	//OperatorBool Operator:
	//	LogicMiddle | ComparatorBool;
	public OperatorBoolElements getOperatorBoolAccess() {
		return pOperatorBool;
	}
	
	public ParserRule getOperatorBoolRule() {
		return getOperatorBoolAccess().getRule();
	}
	
	//OperatorBoolBefore Operator:
	//	LogicBefore;
	public OperatorBoolBeforeElements getOperatorBoolBeforeAccess() {
		return pOperatorBoolBefore;
	}
	
	public ParserRule getOperatorBoolBeforeRule() {
		return getOperatorBoolBeforeAccess().getRule();
	}
	
	//Operand:
	//	Num | Strings | Bool | BoolAttributes | StringAttributes | NumAttributes;
	public OperandElements getOperandAccess() {
		return pOperand;
	}
	
	public ParserRule getOperandRule() {
		return getOperandAccess().getRule();
	}
	
	//OperandNum Operand:
	//	Num | NumAttributes;
	public OperandNumElements getOperandNumAccess() {
		return pOperandNum;
	}
	
	public ParserRule getOperandNumRule() {
		return getOperandNumAccess().getRule();
	}
	
	//OperandBool Operand:
	//	Bool | BoolAttributes;
	public OperandBoolElements getOperandBoolAccess() {
		return pOperandBool;
	}
	
	public ParserRule getOperandBoolRule() {
		return getOperandBoolAccess().getRule();
	}
	
	//OperandString Operand:
	//	Strings | StringAttributes;
	public OperandStringElements getOperandStringAccess() {
		return pOperandString;
	}
	
	public ParserRule getOperandStringRule() {
		return getOperandStringAccess().getRule();
	}
	
	//Expression:
	//	SimpleExp | CompoundExp;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Rule:
	//	'Rule'
	//	name=EString
	//	'{'
	//	'priority'+ '='+ priority=EInt
	//	'rule'+ '='+ leftside=LeftSide
	//	'-->' rightside=RightSide
	//	'}';
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//SimpleExp:
	//	PrecedingLogicOp=LogicOp
	//	'(' (operand+=OperandNum operator=OperatorNum operand+=OperandNum) ')' | PrecedingLogicOp=LogicOp
	//	'(' (operand+=OperandString operator=OperatorString operand+=OperandString) ')' | PrecedingLogicOp=LogicOp
	//	'(' (operand+=OperandBool operator=OperatorString operand+=OperandBool) ')' | PrecedingLogicOp=LogicOp
	//	'(' (operator=OperatorBoolBefore operand+=OperandBool) ')';
	public SimpleExpElements getSimpleExpAccess() {
		return pSimpleExp;
	}
	
	public ParserRule getSimpleExpRule() {
		return getSimpleExpAccess().getRule();
	}
	
	//CompoundExp:
	//	PrecedingLogicOp=LogicOp
	//	'['
	//	expression+=Expression expression+=Expression*
	//	']';
	public CompoundExpElements getCompoundExpAccess() {
		return pCompoundExp;
	}
	
	public ParserRule getCompoundExpRule() {
		return getCompoundExpAccess().getRule();
	}
	
	//enum LogicOp:
	//	None='_' | and | or | not;
	public LogicOpElements getLogicOpAccess() {
		return eLogicOp;
	}
	
	public EnumRule getLogicOpRule() {
		return getLogicOpAccess().getRule();
	}
	
	//enum LogicOpMiddle returns LogicOp:
	//	and | or;
	public LogicOpMiddleElements getLogicOpMiddleAccess() {
		return eLogicOpMiddle;
	}
	
	public EnumRule getLogicOpMiddleRule() {
		return getLogicOpMiddleAccess().getRule();
	}
	
	//enum LogicOpBefore returns LogicOp:
	//	None='_' | not;
	public LogicOpBeforeElements getLogicOpBeforeAccess() {
		return eLogicOpBefore;
	}
	
	public EnumRule getLogicOpBeforeRule() {
		return getLogicOpBeforeAccess().getRule();
	}
	
	//Logic:
	//	Operation=LogicOp;
	public LogicElements getLogicAccess() {
		return pLogic;
	}
	
	public ParserRule getLogicRule() {
		return getLogicAccess().getRule();
	}
	
	//LogicMiddle Logic:
	//	Operation=LogicOpMiddle;
	public LogicMiddleElements getLogicMiddleAccess() {
		return pLogicMiddle;
	}
	
	public ParserRule getLogicMiddleRule() {
		return getLogicMiddleAccess().getRule();
	}
	
	//LogicBefore Logic:
	//	Operation=LogicOpBefore;
	public LogicBeforeElements getLogicBeforeAccess() {
		return pLogicBefore;
	}
	
	public ParserRule getLogicBeforeRule() {
		return getLogicBeforeAccess().getRule();
	}
	
	//Comparator:
	//	Operation=CompOp;
	public ComparatorElements getComparatorAccess() {
		return pComparator;
	}
	
	public ParserRule getComparatorRule() {
		return getComparatorAccess().getRule();
	}
	
	//ComparatorString Comparator:
	//	Operation=CompOpString;
	public ComparatorStringElements getComparatorStringAccess() {
		return pComparatorString;
	}
	
	public ParserRule getComparatorStringRule() {
		return getComparatorStringAccess().getRule();
	}
	
	//ComparatorBool Comparator:
	//	Operation=CompOpBool;
	public ComparatorBoolElements getComparatorBoolAccess() {
		return pComparatorBool;
	}
	
	public ParserRule getComparatorBoolRule() {
		return getComparatorBoolAccess().getRule();
	}
	
	//Math:
	//	Operation=MathOp;
	public MathElements getMathAccess() {
		return pMath;
	}
	
	public ParserRule getMathRule() {
		return getMathAccess().getRule();
	}
	
	//enum CompOp:
	//	greater='>' | greater_equal='>=' | less='<' | less_equal='<=' | equal='=' | not_equal='!=';
	public CompOpElements getCompOpAccess() {
		return eCompOp;
	}
	
	public EnumRule getCompOpRule() {
		return getCompOpAccess().getRule();
	}
	
	//enum CompOpString returns CompOp:
	//	equal='=' | not_equal='!=';
	public CompOpStringElements getCompOpStringAccess() {
		return eCompOpString;
	}
	
	public EnumRule getCompOpStringRule() {
		return getCompOpStringAccess().getRule();
	}
	
	//enum CompOpBool returns CompOp:
	//	equal='=' | not_equal='!=';
	public CompOpBoolElements getCompOpBoolAccess() {
		return eCompOpBool;
	}
	
	public EnumRule getCompOpBoolRule() {
		return getCompOpBoolAccess().getRule();
	}
	
	//enum MathOp:
	//	plus='+' | minus='-' | divided='/' | multiplication='*';
	public MathOpElements getMathOpAccess() {
		return eMathOp;
	}
	
	public EnumRule getMathOpRule() {
		return getMathOpAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//Num:
	//	value=EDouble;
	public NumElements getNumAccess() {
		return pNum;
	}
	
	public ParserRule getNumRule() {
		return getNumAccess().getRule();
	}
	
	//Strings:
	//	value=EString;
	public StringsElements getStringsAccess() {
		return pStrings;
	}
	
	public ParserRule getStringsRule() {
		return getStringsAccess().getRule();
	}
	
	//Bool:
	//	value=EBoolean;
	public BoolElements getBoolAccess() {
		return pBool;
	}
	
	public ParserRule getBoolRule() {
		return getBoolAccess().getRule();
	}
	
	//BoolAttributes:
	//	boolAttr=BoolAttr;
	public BoolAttributesElements getBoolAttributesAccess() {
		return pBoolAttributes;
	}
	
	public ParserRule getBoolAttributesRule() {
		return getBoolAttributesAccess().getRule();
	}
	
	//StringAttributes:
	//	stringAttr=StringAttr;
	public StringAttributesElements getStringAttributesAccess() {
		return pStringAttributes;
	}
	
	public ParserRule getStringAttributesRule() {
		return getStringAttributesAccess().getRule();
	}
	
	//NumAttributes:
	//	numAttr=NumAttr;
	public NumAttributesElements getNumAttributesAccess() {
		return pNumAttributes;
	}
	
	public ParserRule getNumAttributesRule() {
		return getNumAttributesAccess().getRule();
	}
	
	//EDouble ecore::EDouble:
	//	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?;
	public EDoubleElements getEDoubleAccess() {
		return pEDouble;
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}
	
	//EBoolean ecore::EBoolean:
	//	'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//enum BoolAttr:
	//	SNRValues_ASC | SNRValues_DESC;
	public BoolAttrElements getBoolAttrAccess() {
		return eBoolAttr;
	}
	
	public EnumRule getBoolAttrRule() {
		return getBoolAttrAccess().getRule();
	}
	
	//enum StringAttr:
	//	OpRole='OperationalRole';
	public StringAttrElements getStringAttrAccess() {
		return eStringAttr;
	}
	
	public EnumRule getStringAttrRule() {
		return getStringAttrAccess().getRule();
	}
	
	//enum NumAttr:
	//	SecLevel='SecurityLevel' | CarrierFreq='CarrierFrequency';
	public NumAttrElements getNumAttrAccess() {
		return eNumAttr;
	}
	
	public EnumRule getNumAttrRule() {
		return getNumAttrAccess().getRule();
	}
	
	//ActionRadio:
	//	newState=RadioModes;
	public ActionRadioElements getActionRadioAccess() {
		return pActionRadio;
	}
	
	public ParserRule getActionRadioRule() {
		return getActionRadioAccess().getRule();
	}
	
	//enum RadioModes:
	//	SILENT_MODE | ALERT_MODE | FULLDUPLEX_MODE | NORMAL_MODE | MAINTAIN_CURRENT_MODE;
	public RadioModesElements getRadioModesAccess() {
		return eRadioModes;
	}
	
	public EnumRule getRadioModesRule() {
		return getRadioModesAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
