/*
 * generated by Xtext 2.24.0
 */
package ime.xtext.radioDsl.serializer;

import com.google.inject.Inject;
import ime.xtext.radioDsl.services.DslGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class DslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected DslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Rule_EqualsSignKeyword_4_p;
	protected AbstractElementAlias match_Rule_EqualsSignKeyword_7_p;
	protected AbstractElementAlias match_Rule_PriorityKeyword_3_p;
	protected AbstractElementAlias match_Rule_RuleKeyword_6_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (DslGrammarAccess) access;
		match_Rule_EqualsSignKeyword_4_p = new TokenAlias(true, false, grammarAccess.getRuleAccess().getEqualsSignKeyword_4());
		match_Rule_EqualsSignKeyword_7_p = new TokenAlias(true, false, grammarAccess.getRuleAccess().getEqualsSignKeyword_7());
		match_Rule_PriorityKeyword_3_p = new TokenAlias(true, false, grammarAccess.getRuleAccess().getPriorityKeyword_3());
		match_Rule_RuleKeyword_6_p = new TokenAlias(true, false, grammarAccess.getRuleAccess().getRuleKeyword_6());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Rule_EqualsSignKeyword_4_p.equals(syntax))
				emit_Rule_EqualsSignKeyword_4_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Rule_EqualsSignKeyword_7_p.equals(syntax))
				emit_Rule_EqualsSignKeyword_7_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Rule_PriorityKeyword_3_p.equals(syntax))
				emit_Rule_PriorityKeyword_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Rule_RuleKeyword_6_p.equals(syntax))
				emit_Rule_RuleKeyword_6_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '='+
	 *
	 * This ambiguous syntax occurs at:
	 *     name=EString '{' 'priority'+ (ambiguity) priority=EInt
	 */
	protected void emit_Rule_EqualsSignKeyword_4_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '='+
	 *
	 * This ambiguous syntax occurs at:
	 *     priority=EInt 'rule'+ (ambiguity) leftside=LeftSide
	 */
	protected void emit_Rule_EqualsSignKeyword_7_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'priority'+
	 *
	 * This ambiguous syntax occurs at:
	 *     name=EString '{' (ambiguity) '='+ priority=EInt
	 */
	protected void emit_Rule_PriorityKeyword_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'rule'+
	 *
	 * This ambiguous syntax occurs at:
	 *     priority=EInt (ambiguity) '='+ leftside=LeftSide
	 */
	protected void emit_Rule_RuleKeyword_6_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
